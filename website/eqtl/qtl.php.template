<?php
	TEMPLATEWARNINGHASH

/**
STARTOFDOCUMENTATION

=pod

=head1 NAME

qtl.php - present singular effects as expression QTL

=head1 SYNOPSIS

a dynamic weg page - may be invoked without parameters

=head1 DESCRIPTION

The web page represents a first entry to the core results
that have been produced by the analysis. Users will find
useful to rank expression QTL by their statistical likelihood
and to sort/filter them by the chromosomal location or
covariates.

=head1 ATTRIBUTES

The values displayed are derived from the output of R/qtl. Base
pairs positions are derived by an interpolation from centi Morgen
positions between the markers.

The fields to be shown in the table can be selected in the the
check boxes. Also, all QTLs known to the system are displayed. 
A click on these will show the same form again, with values for 
the chromosomal region filled in.

=head2 Common attributes

=over 4

=item Covariates

=item Groups

=item Locus

=item Chromosomes

=item LOD-score span

=item 95% quantile span

=item P-value

=item Min diff of LOD score to 95% quantile

=item cM of peak

=item cM position within flanking positions

=item Trait names

=item Expression mean

=item Expression SD

=back

=head2 cis

The cis attribute is 1 for those traits that are assigned to genes
that have their chromosomal location within the flanking markers.
It is set to 0 for those traits that are assigned to genes on other
chromosomes and may be NULL for traits with no gene assignment or
for such assigned to a cluster of genes.

=head1 AUTHOR

Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>,
ME<eacute>lanie ThessE<eacute>n Hedreul <melthe@ki.se>

=head1 COPYRIGHT

Universities of Rostock and LE<uuml>beck, Germany, 2003-2009

=cut

ENDOFDOCUMENTATION
*/

	require_once("header.php");
	require_once("func_covariates.php");
	require_once("func_selection.php"); // prints part of the HTML for forms

	show_small_header("Selection of eQTL",TRUE);
?>
<?php

	$err=array();
	$conditionList=array(
		"Equal Chromosomes" => array(
			"constraint"=>"trait.chromosome = qtl.Chromosome",
			"description"=>"The QTL and the gene it controls are on the same chromosome"
		),
		"Unequal Chromosomes" => array(
			"constraint"=>"trait.chromosome != qtl.Chromosome",
			"description"=>"The QTL and the gene it controls are on different chromosomes"
		),
		"Within classical QTL" => array(
			"constraint"=>"manual",
			"description"=>"The peak of the e-QTL overlaps with a classical QTL"
		),
		"cis-acting" => array(
			"constraint"=>"cis=1",
			"description"=>"Gene located within flanking markers"
		),
		"trans-acting" => array(
			"constraint"=>"cis=0",
			"description"=>"Gene located outside flanking markers or on other chromosome"
		)
	);

	//print_r($_POST);


	$database="DATABASEEQTLNAME";
	include_once("func_connect.php");

	# fields that should appear
	$dataSelectionFieldsQTL = array(
		"groups",
		"covariate_selection_type",
		"ensemblversion",
		"cM_within","LODmax","LODmin",
		"quantilemin","quantilemax",
		"covariates",
		"LODdiffmin","LODdiffmax",
		"PvalueMin","PvalueMax",
		"cM_Peak_Min","cM_Peak_Max",
		"Mbp_Peak_Min","Mbp_Peak_Max",
		"MeanMin","MeanMax","SdMin","SdMax",
		"locus","chrlist", "condition",
		"trait.chromosome","qtl.Chromosome"
	);

	# fields offered to be optionally deselected from being presented as columns
	$a=array("Trait"=>1, "Groups"=>1, "LocusOfGene"=>1, "ExpressionOfGene" => 1, "Locus"=>1,
		"LOD"=>1,"LODdiff"=>1,"pvalue" => 1, "Quantile"=>1,
		"covariates"=>1,
		"Chromosome"=>1, "cMorgan_Peak"=>1, "cMorgan_Min"=>0, "cMorgan_Max"=>0,
		"Gid"=>0, "gene_name"=>1, "name"=>1, "ensembl_stable_gene_id"=>1, "mean"=>1, "sd"=>1 
	);
			

	# Conversion of array keys to values to be checked as being parameter names
	function prependShow($value) {
		$m = "show_".$value;
		return($m);
	};
	$aKeys = array_keys($a);
	$aPrepend = array_map("prependShow",$aKeys);
	#echo "Mapping: " . join(",",$aPrepend)."\n";

	$accessible_fields_in_POST_or_GET = array_merge(

		$dataSelectionFieldsQTL,

		array(  "direct",
			"debug",
			"submitted",
			"onlyNumbers",
			"onlyNumbersGrouped"
		),

		$aPrepend,

		array(
			"traits",
			"traitlist",
			"gene_name",	
			"limit","order"
		),
		
		convert_string_to_covariates_array(strtolower("qtl"))
	);

	if (isset($_POST["debug"]) or isset($_GET["debug"])) {
		echo "<br>Retrieving info for: "; print_r($accessible_fields_in_POST_or_GET); echo "<br>\n";
	}

	foreach($accessible_fields_in_POST_or_GET as $vname)
	{
		if (isset($_POST[$vname])) {
			if (is_array($_POST[$vname])) {
				$$vname=$_POST[$vname];
			}
			else {
				$$vname = ltrim(rtrim($_POST[$vname]));
				if (isset($debug) or array_key_exists("debug",$_POST) or array_key_exists("debug",$_GET)) {
					echo $vname."=".$$vname."\t";
				}
			}
		}
		elseif(isset($_GET[$vname])) {
			if (is_array($_POST[$vname])) {
				$$vname=$_POST[$vname];
			} else {
				$$vname = ltrim(rtrim($_GET[$vname]));
				if (isset($debug) or array_key_exists("debug",$_POST) or array_key_exists("debug",$_GET)) {
					echo $vname."=".$$vname."\t";
				}
			}
		}
	}

	if (!empty($covariates)) {
		if (!is_array($covariates)) {
			if ("none"=="$covariates") {
				$covariates=array('');
			}
			else {
				$covariates=preg_split("/[, ;]+/",$covariates);
			}
		}
	}
	if (!empty($direct)) {
		foreach($a as $i=>$v) {
			$n="show_".$i;
			$$n=$v;
		}
	}

	if (empty($direct) and empty($submitted))
	{
		include_once("func_public_qtl.php");
		print_cQTL_javascript_section();
?>
		<form id="mainform" action="qtl.php" method="post">
		<input type="hidden" name="submitted" value="1">
		<table width="100%"><tr><td>
			<table>
			<tr><th class=r valign=top>Covariates:<br>
	<font size="-3"><i>
	<?php
		$cvs=get_covars_on_your_own_from_qtl($linkLocal);
		$colors=array("red","green","blue","black");
		foreach ($cvs as $n=>$c) {
			if ($n>0) {
				echo "; ";
				#if ( 0== $n%2) {
				#	echo "<br>\n";
				#}
			}
			$i=$n%count($colors);
			echo "<font color=".$colors[$i].">".displayCovariates("$c")."</font>";
		}
	?>
	</i></font>
			</th><td colspan=3 valign=top>
	<?php
					select_covariates($linkLocal, "qtl");
	?>
			</td></tr>

	<?php
			print_selection_form("all_qtl");
	?>
			<tr><th class=r>Order by:</th><td colspan=3>
						<select name=order>
						<option value=Chromosome>Chromosome</option>
						<option value="pvalue ASC, LOD DESC" selected>P-value</option>
						<option value="LOD DESC">LOD score</option>
						<option value="LODdiff DESC">LOD-Quantile diff</option>
						<option value=cMorgan_Peak>cMorgan</option>
						</select>
						</td></tr>
			<tr><th class=r>Limit lines shown</th>
			    <td colspan=3><input type=text name=limit value=500></td></tr>
			<tr><td>&nbsp;</td><td></td></tr>
			<tr><td align=right><input type=submit></td><td align=left><input type=reset></td></tr>
			</table>

			<p>Check for presenting the number of QTLs only:
			   <input type="checkbox" name="onlyNumbers"<?php
				echo empty($onlyNumbers)?"":" value=\"$onlyNumbers\""; ?>>
			   <br />
			&nbsp;
			   	<input type="radio" name="onlyNumbersGrouped" value="totals" <?php echo empty($onlyNumbersGrouped)?
			   					" checked":
			   					(("totals"=="$onlyNumbersGrouped")?" checked":"")?> >Totals only</input><br />
			&nbsp;
			   <input type="radio" name="onlyNumbersGrouped" value="trait.chromosome"
			   <?php
			   	echo (!empty($onlyNumbersGrouped) and "trait.chromosome"=="$onlyNumbersGrouped")?" checked":"";
			    ?> >Trait's Chromosome</input><br />
			&nbsp;
			   <input type="radio" name="onlyNumbersGrouped" value="qtl.Chromosome" <?php 
			        echo (!empty($onlyNumbersGrouped) and "qtl.Chromosome"=="$onlyNumbersGrouped")?" checked":"";
			    ?> >eQTL's Chromosome</input><br />
			</p>

			<?php
			require_once("func_conditions.php");
			print_condition_form_element($conditionList,
				"Select from the following constraints",
				empty($condition)?array():$condition);
			?>
		
		</td><td align=right valign=top>
			<small><small>
			<table border=0>
			<tr bgcolor=black><th class=c><small><font color=orange>Show</font></small></th><th><small><font color=orange>Field</font></small></th></tr>
<?php
			foreach($a as $i=>$v) {
				echo "<tr><td align=right><input type=checkbox name=show_".$i.(empty($v)?"":" checked")."></td><td><small><i>$i</i></small></td></tr>\n";
			}
?>
			</table>
			</small></small>
		</td><td valign=top>
			<table border=0>
			<tr bgcolor="red"><th colspan=4 class=c>QTLs - Select Locus</th></tr>
			<tr bgcolor="orange"><th>Name</th><th>Chromosome</th><th><small>bp From</small></th><th><small>bp To</small></th></tr>
<?php
		select_from_public_qtls($linkLocal);

?>
			</table>
		</td></tr>
		</table>
		</form>
<?php
	}
	else {
		include_once("func_species.php");
		if (file_exists("func_conversion_$ensemblversion.php")) {
			include_once("func_conversion_$ensemblversion.php");
		}
		else {
			errorMessage("Missing file 'func_conversion_$ensemblversion.php' for the translation between cMorgan and bp.");
			exit;
		}
		if (file_exists("func_expressionview.php")) {
			include_once("func_expressionview.php");
		}
		include_once("func_public_qtl.php");

		if (!empty($Mbp_Peak_Min) and !empty($cM_Peak_Min)) {
			errorMessage("Both minimal Mbp and minimal cMorgan are specified.");
			exit;
		}
		elseif (!empty($Mbp_Peak_Min)) {
			if (empty($chrlist) or is_array($chrlist)) {
				echo "chrlist: "; print_r($chrlist);
				errorMessage("When specifying Mbp positions, one also needs to specify exactly one chromosome.");

				exit;
			}
			$cM_Peak_Min=bp2cM($chrlist,$Mbp_Peak_Min*1000*1000);
		}
		if (!empty($Mbp_Peak_Max) and !empty($cM_Peak_Max)) {
			errorMessage("Both maximal Mbp and maximal cMorgan are specified.");
			exit;
		}
		elseif (!empty($Mbp_Peak_Max)) {
			if (empty($chrlist) or is_array($chrlist)) {
				errorMessage("When specifying Mbp positions, one also needs to specify exactly one chromosome.");
				exit;
			}
			$cM_Peak_Max=bp2cM($chrlist,$Mbp_Peak_Max*1000*1000);
		}

		$where="WHERE ";
		$query = "SELECT ";
		if (!empty($onlyNumbers) and $onlyNumbers and !(isset($condition) and is_array($condition) and in_array("Within classical QTL",$condition))) {
			if (!empty($onlyNumbersGrouped) and !("totals"==$onlyNumbersGrouped)) {
				if ("qtl.Chromosome"=="$onlyNumbersGrouped") {
					$query .= "$onlyNumbersGrouped,";
				} else if ("trait.chromosome" == "$onlyNumbersGrouped") {
					$query .= "$onlyNumbersGrouped,";
				} else {
					errorMessage("Unknown attribute to group for: '$onlyNumbersGrouped'.");
					exit;
				}
			}
			$query .= "COUNT(*)";
		}
		else {
			#$query .= "DISTINCT ";
			$query .= "Trait, Locus, LOD";

			if (!empty($show_pvalue)) {
				$query .= ", pvalue";
			}

			$query .= ", covariates"; # we always need to know the covariates

			if (!empty($show_Groups)) {
				$query .= ", qtl_groups.group_id";
			}
			#, l.Name as lName, 
			#. ", l.Chr, l.cMorgan "
			$query .= ", qtl.Chromosome"
				. ", qtl.cMorgan_Peak, qtl.cMorgan_Min, qtl.cMorgan_Max"
			;
			$query .= ", qtl.Quantile"
				. ", (qtl.LOD-qtl.Quantile) as LODdiff ";

			
			if (!empty($show_gene_name)) {
				$query .= ", gene_name";
			}

			if (!empty($show_ensembl_stable_gene_id)) {
				$query .= ", ensembl_stable_gene_id";
			}

			if (!empty($show_name)) {
				$query .= ", trait.name";
			}

			if (!empty($show_LocusOfGene)) {
				$query .= ", trait.chromosome as chr_name"
				    # . ", strand"
					. ", start as gene_chrom_start,stop as gene_chrom_end";
			}

			if (!empty($show_ExpressionOfGene)) {
				$query .= ", trait.mean, trait.sd";
			}
		}

		#
		# F R O M
		#

		$query  .= " FROM qtl ";

		if (!empty($show_Groups) or !empty($groups)) {
			if (empty($groups)) {
				# every QTL shall be inspected
				$query .= " left ";
			}
			else {
				# presumed more efficient since the group is considerably constraining
				$query .= " right ";
			}
			$query .= " join locus as l on qtl.Locus=l.Name ";

			if (empty($groups)) {
				$query .= " left ";
			}
			else {
				$query .= " right ";
			}
			$query .= " join qtl_groups on locus_id=l.No ";
		}

		# The counting of QTLs should now be influencing the numbers of QTLs shown
		# These extra joins are not needed for every kind of query, some optimisation
		# would help to speed things up!

		if (!(empty($show_LocusOfGene) and empty($show_Chromosome)
			and empty($MeanMin) and empty($MeanMax)
			and empty($SdMin) and empty($SdMax) and empty($show_ExpressionOfGene)
			and empty($show_gene_assignment)
			and empty($gene_name)))
		{
			$query .= " join trait on Trait=trait.trait_id ";
		}

		$needingMart=!empty($show_LocusOfGene);
		if (!empty($condition) && is_array($condition)) foreach($condition as $c) {
			$needingMart=TRUE;
		}
		$needingMart=FALSE;

		if ($needingMart) {
		        $query .= "left join ensembl_mart_${ensemblversion}";
			if ($ensemblversion<27) $query .= "_1";
			$query .= ".";
			if (""=="EXTERNALGENEDB") {
				if ($ensemblversion<=30) {
					$query .= "${species_name_ensembl_mart}_ensemblgene_xref_RefSeq_dm";
				}
				else {
					$query .= "${species_name_ensembl_mart}_gene_ensembl__xref_refseq_dna__dm";
				}
				$query .= " as a on a.dbprimary_id=LEFT(gene_assignment,(INSTR(gene_assignment,'.') - 1)) ";
				$query .= " left join ensembl_mart_${ensemblversion}";
				if ($ensemblversion<27) $query .= "_1";
				$query .= ".";
				if ($ensemblversion<30) {
					$query .= "${species_name_ensembl_mart}_ensemblgene_main";
				}
				else {
					#$query .= "${species_name_ensembl_mart}_gene_ensembl__gene__main";
					$query .= "${species_name_ensembl_mart}_gene_ensembl__transcript__main";
				}
				$query .= " as b using (";
				if ($ensemblversion<30) {
					$query .= "gene_id";
				}
				else {
					$query .= "gene_id_key";
				}
				$query .= ") ";
			}
			else if ("ensembl transcript"=="EXTERNALGENEDB" or "ensembl gene" == "EXTERNALGENEDB") {
				$query .= "${species_name_ensembl_mart}_gene_ensembl__transcript__main";
				if ("ensembl transcript"=="EXTERNALGENEDB") {
					$query .= " on transcript_stable_id=gene_assignment";
				}
				else {
					$query .= " on gene_stable_id=gene_assignment";
				}
			}
			else {
				echo "Unknown external db: 'EXTERNALGENEDB'.\n";
				exit;
			}
		}

		#
		# W H E R E 
		#

		if (!empty($groups)) {
			if (is_array($groups)) {
				$g=$groups;
			}
			else {
				$g=preg_split("/[ ,;\t\n\r]+/",$groups);
			}
			if (count($g)>0) {
				if ("WHERE " != $where) $where .= " AND ";
				if (1==count($g)) {
					$where .= " qtl_groups.group_id=".$g[0];
				}
				else {
					$where .= " qtl_groups.group_id in ('".join("','",$g)."')";
				}
			}
		}

		if (!empty($locus)) {
			if (is_array($locus)) {
				$loci=$locus;
			}
			else {
				$loci=preg_split("/[ ,;\t\n\r]+/",$locus);
			}
			if (count($loci)>0) {
				if ("WHERE " != $where) $where .= " AND ";
				if (1==count($loci)) {
					$where .= " qtl.Locus='".$loci[0]."'";
				}
				else {
					$where .= " qtl.Locus in ('".join("','",$loci)."')";
				}
			}
		}
		if (!empty($chrlist)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " qtl.Chromosome";
			$where .= " in ('".join("','",preg_split("/[, ;]+/",$chrlist))."') ";
		}

                if (!empty($traitlist)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " Trait in ('".join("','",preg_split("/[, ;]+/",$traitlist))."') ";
		}

		if (!empty($gene_name)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " trait.gene_name in ('".join("','",preg_split("/[, ;]+/",$gene_name))."') ";
		}

		#
		# MeanExpression
		#

		if (!empty($MedianMin) and !empty($MedianMax)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " (trait.Median between $MedianMin and $MedianMax) ";
		}
		elseif( !empty($MedianMin) ) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " median >= ".$MedianMin;
		}
		elseif( !empty($MedianMax) ) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " median <= ".$MedianMax;	
		}

		if (!empty($MeanMin) and !empty($MeanMax)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " (trait.Mean between $MeanMin and $MeanMax) ";
		}
		elseif( !empty($MeanMin) ) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " mean >= ".$MeanMin;	
		}
		elseif( !empty($MeanMax) ) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " mean <= ".$MeanMax;
		}

		if( !empty($SdMin) ) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " sd >= ".$SdMin;
		}

		if( !empty($SdMax) ) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " sd <= ".$SdMax;
		}

		if( !empty($VarianceMin) ) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " variance >= ".$VarianceMin;
		}

		if( !empty($VarianceMax) ) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " variance <= ".$VarianceMax;
		}

		#
		#	Covariates - they are always queried
		# 

		if (isset($debug) and !empty($debug)) {
			echo "<pre>";
			echo "covariate_selection_type: $covariate_selection_type\n";
			echo "covariates: "; print_r($covariates); echo "\n";
			#echo "\$_POST:" ; print_r($_POST); echo "\n";
			echo "</pre>\n";
		}
		if ("selected" == $covariate_selection_type) {
			if (DATABASEISUSINGSETSTOREPRESENTCOVARIATES) {
				if ("WHERE " != $where) $where .= " AND ";
				if (empty($covariates) or 0==count($covariates)) {
					$where .= " covariates='' ";
				}
				else {
					$where .= " covariates='".join(",",$covariates)."' ";
				}
			} else {
				echo "FIXME:  missing implementation for this covariate representation\n";
			}
		}

		# Performing tests on eligibility of values prior to entering 
		# if statements

		if (!(empty($cM_Peak_Min) or is_numeric($cM_Peak_Min))) {
			array_push($err,
			  "The lower boundary in cMorgan positions for loci under "
			 ."investigation must be numeric ($cM_Peak_Min).\n");
		}

		if (!(empty($cM_Peak_Max) or is_numeric($cM_Peak_Max))) {
			array_push($err,
			  "The upper boundary in cMorgan positions for loci under "
			 ."investigation must be numeric ($cM_Peak_Max).\n");
		}

		if (!(empty($cM_Peak_Min) or empty($cM_Peak_Max))) {
			# A region is specified
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " (cMorgan_Peak BETWEEN ".$cM_Peak_Min." AND ".$cM_Peak_Max.") ";
		}
		else {
			if (!empty($cM_Peak_Min)) {
				if ("WHERE " != $where) $where .= " AND ";
				$where .= " cMorgan_Peak >= ".$cM_Peak_Min." ";
			}
			if (!empty($cM_Peak_Max)) {
				if ("WHERE " != $where) $where .= " AND ";
				$where .= " cMorgan_Peak <= ".$cM_Peak_Max." ";
			}
		}

		if (!empty($cM_within)||"0"==$cM_within) {
			if (!is_numeric($cM_within)) array_push($err,"The position to be within a QTL must be numeric ($cM_within).\n");
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " ($cM_within between cMorgan_Min and cMorgan_Max) ";
		}

		if (!empty($LODmin)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " LOD >= ".$LODmin." ";
		}
		if (!empty($LODmax)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " LOD <= ".$LODmax." ";
		}
		if (!empty($quantilemin)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " Quantile >= ".$quantilemin." ";
		}
		if (!empty($quantilemax)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " Quantile <= ".$quantilemax." ";
		}
		if (!empty($PvalueMin)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " pvalue >= ".$PvalueMin." ";
		}
		if (!empty($PvalueMax)) {
			if ("WHERE " != $where) $where .= " AND ";
			$where .= " pvalue <= ".$PvalueMax." ";
		}
		// LODdiff = LOD - Quantile
		if (!isset($LODdiffmin) and "" != "$LODdiffmin") {
			if (!is_numeric($LODdiffmin)) {
				array_push($err, "LOD score difference must be numeric.\n");
			}
			else {
				if ("WHERE " != $where) $where .= " AND ";
				$where .= " (LOD - Quantile) >= ".$LODdiffmin." ";
			}
		}
		
		if (!empty($condition) && is_array($condition)) {
			foreach($condition as $c) {
				if ("manual" != $conditionList[$c]["constraint"]) {
					if (!empty($conditionList[$c]["constraint"])) {
						if ("WHERE " != $where) $where .= " AND ";
						$where .= " ".$conditionList[$c]["constraint"]." ";
					}
				}
			}
		}

		$query .= " $where ";

		if (!empty($onlyNumbers) and !empty($onlyNumbersGrouped) and "totals" != "$onlyNumbersGrouped"
				and !( isset($condition) and is_array($condition) and in_array("Within classical QTL",$condition) )
		   ) {
			$query .= " GROUP BY $onlyNumbersGrouped ORDER BY $onlyNumbersGrouped";
		}

		if ((empty($onlyNumbers) or !$onlyNumbers) and !(isset($condition) and is_array($condition) and in_array("Within classical QTL",$condition))) {
			if (!empty($order)) {
				$query .= " ORDER BY ".$order." ";
			}

			if (!empty($limit)) {
				$query .= " LIMIT ".$limit." ";
			}
		}

		if (0<count($err)) {
			echo "<p>Please address the following error".(1<count($err)?"s":"").":<br>";
			foreach ($err as $e) {
				echo $e."<br>";
			}
			echo "</p>";
			mysql_close($linkLocal);
			exit;
		}

		if (isset($debug) and !empty($debug)) echo "query: $query<br>";

		$result = mysql_query($query,$linkLocal);
		if (empty($result)) {
			errorMessage(mysql_error($linkLocal)."</p><p>".$query."</p>");
			//echo "LinkLocal: "; print_r($linkLocal);
			mysql_close($linkLocal);
			exit;
		}

		$traits=array();
		$genes = array();
		if (!empty($onlyNumbers) and isset($condition) and is_array($condition) and in_array("Within classical QTL",$condition)) {
		    $rowno=0;
		    $chr_count=array();
		    $qtls = get_public_qtls($linkLocal);
		    while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) {

			# preparation of a hash with chromosomes that can be incremented later
			$cMpeak=$line["cMorgan_Peak"];
			$c=$line["Chromosome"];
			$chromdingens=$line["chr_name"];
	                $bp=cM2bp($c,$cMpeak);

                        $qs=withinthefollowingqtls($c,$bp,$qtls);
                        if (0==count($qs)) {
                            #    echo "<tr><td colspan=1000>Ignoring row since it does not overlapt with classical QTLs</td></tr>\n";
                                continue;
                        }
			if (!empty($onlyNumbersGrouped) and "trait.chromosome" == "$onlyNumbersGrouped") {
			    if(array_key_exists($chromdingens,$chr_count)){
			       $chr_count[$chromdingens]++;
			    } else{
			       $chr_count[$chromdingens]=1;
			    }
			}
			elseif (!empty($onlyNumbersGrouped) and "qtl.Chromosome" == "$onlyNumbersGrouped") {
			if(array_key_exists($c,$chr_count)){
                           $chr_count[$c]++;
                        }
                        else{
                           $chr_count[$c]=1;
                        }

			}
                        $rowno++;
	            }
		    ##### FIXME: REDUNDANT CODE BLOCK
	            if (!empty($onlyNumbersGrouped) and "totals" == "$onlyNumbersGrouped") {
                        echo "<pre>";
                        echo "Number of eQTL within classical QTL:<br>";
                        print_r($rowno);
                        echo "</pre>\n";
                    } else {
                        echo "<table><thead><tr><th>Chromosome</th><th>#</th></tr></thead>\n";
                        echo "<tbody>\n";
                        echo "else fall\n";
                        $sum =0;
                        foreach ($chr_count as $chrom => $counter) {
                            echo "<tr>";
                            echo "<td>$chrom</td>";
                            echo "<td>$counter</td>";
                            echo "</tr>\n";
                            $sum += $counter;
                        }	
			echo "</tbody>\n";
			echo "<tfooter>";
			echo "<tr>";
			echo "<td>Sum</td>";
			echo "<td>".$sum."</td>";
			echo "</tr>\n";
			echo "</tfooter>";
			echo "</table>\n";
                    }
		}
		elseif(!empty($onlyNumbers)){
			if (!empty($onlyNumbersGrouped) and "totals" == "$onlyNumbersGrouped") {
				while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) {
					echo "<pre>";
					print_r($line);
					echo "</pre>\n";
				}
			}
			else {
				$r=array();
				echo "<table><thead><tr><th>Chromosome</th><th>#</th><th># accum.</th><th>Link</th></tr></thead>\n";
				echo "<tbody>\n";
				$s=0;
				$s_unassigned=0;
				while ($line = mysql_fetch_row($result)) {
					#print_r($line); echo "<br />\n";
					$r["Chr. '".$line[0]."'"]=$line[1];
					echo "<tr>";
					if ('' == $line[0]) {
						echo "<td><strike>".$line[0]."</strike></td>";
						echo "<td><strike>".$line[1]."</strike></td>";
						$s_unassigned += $line[1];
					} else {
						echo "<td>".$line[0]."</td>";
						echo "<td>".$line[1]."</td>";
						$s += $line[1];
					}
					echo "<td>$s + $s_unassigned</td>";
					echo "<td>";
					if ("trait.chromosome" == "$onlyNumbersGrouped") {
						echo "<a href=\"qtl.php?TraitChromosome=".$line[0]."\">qtl</a>";
					} else if ("qtl.Chromosome" == "$onlyNumbersGrouped") {
						echo "<a href=\"qtl.php?chrlist=".$line[0]."\">qtl</a>";
					} else {
						echo "<i>error</i>";
					}
					echo "</td></tr>\n";
				}
				echo "</tbody>\n";
				echo "<tfooter>";
				echo "<tr>";
				echo "<td>Sum</td>";
				echo "<td>$s <i>+ $s_unassigned</i></td>";
				echo "</tr>\n";
				echo "</tfooter>";
				echo "</table>\n";
			}
		}
		else {
		
		    $rowno=0;
		    //print_r($condition);
		    $demandOverlappingQTL=FALSE;
		    if(isset($condition) and is_array($condition) and in_array("Within classical QTL",$condition)) {
			$demandOverlappingQTL=TRUE;
		    }
		    echo "<small><table border=1>\n<thead>\n";
		    $qtls = get_public_qtls($linkLocal);
		    while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) {

// 			if (empty($line["cMorgan_Max"])) {
// 				if ($debug) echo "\nDebug: <p>empty(\$line[\"cMorgan_Max\"]</p>\n";
// 				$cMmin=$line["Morgan"]*100-10;
// 				$cMpeak=$line["Morgan"]*100;
// 				$cMmax=$line["Morgan"]*100+10;
// 			}
// 			else {
// 				$cMmin=$line["cMorgan_Min"];
				$cMpeak=$line["cMorgan_Peak"];
// 				$cMmax=$line["cMorgan_Max"];
// 			}

			//print_r($line); echo "<br>\n";

			$c=$line["Chromosome"];
			#$c=$line["Chr"];
			$bp=cM2bp($c,$cMpeak);

			//echo "<td align=right><small><small>$bp</small></small></td>";
			$qs=withinthefollowingqtls($c,$bp,$qtls);
			if ($demandOverlappingQTL && 0==count($qs)) {
				//echo "<tr><td colspan=1000>Ignoring row since it does not overlapt with classical QTLs</td></tr>\n";
				continue;
			}

			$rowno++;
			if (1==$rowno) {
				$firstRow=FALSE;
				echo "<tr bgcolor=yellow>";
				echo "<th class=c>#</th>";
				foreach($line as $n=>$l) {
					if ("group_id"=="$n") $n = "Groups"; #FIXME: attribute name needs to be adjusted
					$f="show_".$n;
					if (!empty($$f)) {
						if ("cMorgan_Peak" == "$n") {
							echo "<th class=c><small>Peak in cM / Mbp</small></th>";
						}
						else {
							echo "<th class=c><small>$n</small></th>";
						}
						if ("Trait"==$n) {
							echo "<th class=c colspan=1>";
							if(!empty($show_LocusOfGene) and !empty($show_ExpressionOfGene)) {
								echo "Trait <small>chr"
									#.",strand"
									.":start</small><br>"
									."Expression <small>mean (sd)</small>";
							}
							else if(!empty($show_LocusOfGene)) {
								echo "<th class=c colspan=2><small>Trait<br>chr"
								#.",strand"
								.",start</small></th>";
							}
							else if(!empty($show_ExpressionOfGene)) {
								echo "<small>Expression mean (sd)</small>";
							}
							echo "</th>";
						}
					}
				}
				echo "<th class=c>Public QTLs</th>";
			#	echo "<th class=c>Links</th>";
			#	echo "<th>Images</th>\n";
				echo "</tr>\n</thead>\n<tbody>\n";
			}
			echo "<tr><td>$rowno</td>";
			foreach($line as $n=>$l) {
				if ("group_id"=="$n") $n = "Groups"; #FIXME: attribute name needs to be adjusted
				$f="show_".$n;
				if (!empty($$f)) {
					#echo "not empty: \$$f\n";
					switch($n) {
						case "Trait":
							array_push($traits,$l);
							echo "<td class=small align=center nowrap>";
							echo "<a href=\"trait.php?direct=1&traitlist=$l\">$l</a><br>";
							echo "<small>";
							echo "["
							."<a href=\"qtl.php?direct=1&traitlist=$l\">qtls</a>,"
							."<a href=\"effectplot.php?direct=1&traitlist=$l&chromosome=$c&cM=$cMpeak&verbose=1\">eff</a>,"
							."<a href=\"interaction.php?direct=1&traitlist=$l&direct=1&LODmin=0\">int</a>"
							."]";
							echo "</small>";
							echo "</td>\n";
							if (!empty($show_LocusOfGene) or !empty($show_ExpressionOfGene)) {
								echo "<td class=small align=center><small>";
								if (!empty($show_LocusOfGene)) {
									echo $line["chr_name"].":";
									#echo "<td class=small>".$line["strand"]."</td>";
									echo $line["gene_chrom_start"]."-".$line["gene_chrom_end"];
								}
								if (!empty($show_ExpressionOfGene)) {
									if (!empty($show_LocusOfGene)) echo "<br />";
									echo $line["mean"]." (".$line["sd"].")";
								}
								echo "<small></td>";
							}
							break;
						case "Chr":
						case "Chromosome":
							echo "<td class=small><a href=\"http://www.ensembl.org/$ensemblorganism/mapview?chr=$c\">$l</a>";
							echo " <a href=\"http://www.ensembl.org/$ensemblorganism/syntenyview?otherspecies=Homo_sapiens&chr=$c\">Hs</a></td>";
							break;
						case "Locus":
							echo "<td><a href=\"locus.php?Name=$l\">$l</a></td>";
							break;
						case "cMorgan_Peak":
							$bpPeak = cM2bp($c,$cMpeak);
							echo "<td class=small>";
							echo round($cMpeak,1) . " cM /";
							echo "<a href=\"http://www.ensembl.org/$ensemblorganism/contigview?chr=$c&vc_start="
									.($bpPeak-100000)."&vc_end="
									.($bpPeak+100000)."\">".round($bpPeak/1000/1000,1)."</a> Mbp";
							echo "</td>";
							break;
						case "cMorgan_Min":
							echo "<td class=small>".round($cMmin,4)."</td>";
							break;
						case "cMorgan_Max":
							echo "<td class=small>".round($cMmax,4)."</td>";
							break;
						case "LOD":
							echo "<td class=small>".round($l,4)."</td>";
							break;
						case "LODdiff":
							echo "<td class=small>".round($l,4)."</td>";
							break;
						case "gene_name":
							array_push($genes,$l);
							$b=explode(".",$l);
							echo "<td class=small><a href=\""
								.gene2ensemblUrl($b[0],$ensemblorganism)
								."\">$l</a></td>";
							break;
						case "covariates":
							if (empty($l)) $l="none";
							echo "<td class=small>".displayCovariates($l,",<BR>")."</td>";
							break;
						case "Groups":
							# only one group per eQTL in current implementation
							# needs adjustment to look up names of group
							echo "<td>";
							if (!empty($l)) {
							     echo "<a href=\"http:qtl.php?groups=$l\">$l</a>";
							}
							echo "</td>";
							break;
						default:
							if (!isset($l)||""==$l) echo "<td>&nbsp;</td>";
							else echo "<td class=small>$l</td>";
					}
					echo "</td>";
				}
				else {
					#echo "empty: \$$f\n";
				}
				//expressionviewgene(array("db"=>"EMBL","name"=>$line["Transcript"],"symbol"=>$line["Accession"]));


				$symb="";
				if (empty($line["Symbol"])) {
					$symb="Trait#".$line["Trait"];
				}
				else {
					$symb=$line["Symbol"];
					if (file_exists("func_expressionview.php")) {
						expressionviewgene(
							array(
								#"db"=>"REFSEQ",
								#"name"=>$line["Accession"],
								"db"=>"HUGO",
								"name"=>$symb,
								"symbol"=>$symb)
						);
					}
				}

				if (isset($cMmin) and isset($cMmax)) {
					$a=cM2bp($c,$cMmin);
					if ($a<0) $a=0;
					$b=cM2bp($c,$cMmax);
					if ($b<0) $b=0;
				
					if (file_exists("func_expressionview.php")) {
						expressionviewqtl(array("name"=>$symb,
							//"trait"=>$line["Trait"],
							"trait"=>$symb,
							"chr"=>$c,
							"cMmin"=>$cMmin, "cMmax"=>$cMmax,
							"bpmin"=>min($a,$b),"bpmax"=>max($a,$b)
						));
					}
				}
			}

			echo "<td class=small>";
			if (0==count($qs)) {
				echo "&nbsp;";
			}
			else {
				echo join(",",$qs);
			}

			echo "</td>";
/*
			echo "<td class=link>";
			echo "<a href=\"genes_within.php?chr="
				.$c
				."&bpFrom=".cM2bp($c,$cMmin)
				."&bpTo=".cM2bp($c,$cMmax)
				."&bpPeak=".cM2bp($c,$cMpeak)."\">"
				."Genes"
				."</a><br><hr>Plots w/ cofactor\n";
				foreach(array("Severity","AUC","onset") as $cofactor) {
				   echo " <a href=qtl_dynamic.php?traitlist=".$line["Trait"]
				          ."&analysis=$cofactor>$cofactor</a>";
				}
				echo "</td>";
*/
		#	echo "<td class=link>"
		#	 . "<a href=\"images/".$line["Trait"]."_onescan.pdf\">one</a>"
		#	 ." <a href=\"images/".$line["Trait"]."_nosex_twoscan.pdf\">two</a>"
		#	 ." <a href=\"images/".$line["Trait"]."_sex_twoscan.pdf\">two-sex</a>"
		#	 ."</td>\n";
			echo "</tr>\n";
		    }
		    echo "</tbody>\n</table>\n";
		    if (0==$rowno) {
			echo "<p>No records found matching criteria.</p>";
		    }
		    else {
			$traits_unique = array_unique($traits);
			$genes_unique = array_unique($genes);
			echo "<p>$rowno record".($rowno>1?"s":"")." found matching criteria for ".count($traits_unique)." traits.</p>\n";

		    	if (file_exists("func_gprofiler.php")) {
				require_once("func_gprofiler.php");
				gprofilerlink($traits_unique,$genes_unique,$query);
			}

			if (file_exists("func_expressionview.php")) {
				expressionviewlink("$ensemblorganism");
			}
		    }
		    echo "</small>";
		}
		mysql_free_result($result);
		mysql_close($linkLocal);
	}
	include("footer.php");
?>
