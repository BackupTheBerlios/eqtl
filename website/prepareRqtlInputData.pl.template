#!/usr/bin/perl -w

TEMPLATEWARNINGHASH

=head1 NAME

prepareRqtlInputData.pl - transforms expresssion data and genotype data into single files for job input

=head1 SYNOPSIS

Called from the web server. Needs identifier 'probesetid' to denote the gene to be investigated.

For debugging:

./prepareRqtlInputData.pl [--verbose] probesetid

./prepareRqtlInputData.pl [--man|--help]

=head1 DESCRIPTION

Except for a change in the interpretation of covariates, i.e. from
interacting to additive, every computation needs a different input. This
input is prepared by this script, which involves the reading of all input
data by a web server, to subsequently generate the right combinations
upon request.

The script does not perform any selection of workunits, or reports on
the submission, it only prepares the data.

It should be mentioned that (although preferred) the data of genotypes
and phenotypes are not required to be in the same order. There should
however be a way to match the names from the genotype file to the names
of the phenotype file.

The term phenotypes here refers to the molecular phenotypes. The
classical/clinical phenotypes are expected together with the genotypes.

Since every experiment has a similar structure, also the data will be
very similar in its schema. The raw data that is worked with in this file,
however may differ in various ways.  This script has a slight dependency
on the column names and one needs to perform some further abstractions
on the code here in order to help with future cross-project compatibility.

=head1 OPTIONS

=over 4

=item --verbose

useful only while developing and invoking the script from the command line

=back

=head1 DETAILS

It is preferable for the
intput files to have the same IDs for the individuals for the
marker files and the phenotypic data. If not, then the values
obviously need to be in the same order, but to have some
option to test the consistency - just be as strict as possible.

To reorder a matrix, this is how it can be done in R

  df<-read.delim("PHENOFILE",row.names=1)
  cnames<-colnames(df)
  cnames.order<-order(cnames)
  df.sorted<df[,cnames.order]
  df.sorted<-df[,cnames.order]
  write.table(x=df.sorted,
              file="PHENOFILE_ordered.txt",col.names=T,sep="\t",row.names=T)


=head1 AUTHORS

Jan Kolbaum,

Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>,

Benedikt Bauer.

=head1 COPYRIGHT

University of LE<uuml>beck, Germany, 2008-2009

=cut

use CGI::Carp qw(fatalsToBrowser);
use strict;
use FCGI;
use Cwd;
use Pod::Usage;
use Getopt::Long;

my $help=0;
my $man=0;
my $verbose=0;
my $applyLog2="APPLYLOG2";
# print STDERR "\n *** applyLog2 initialised to '$applyLog2'.\n\n";
my $applyTrue;
my $applyFalse;

GetOptions("verbose" =>\$verbose, "help" => \$help, "man" => \$man,
	"applyLog2" => \$applyTrue, "doNotApplyLog2" => \$applyFalse
	) or die "Could not parse options: $@.\n";

if ($applyTrue and $applyFalse) {
	die "Error, cannot instruct to both apply and not-apply Log2 transformation.\n";
}
elsif ($applyTrue) {
	if ("FALSE" eq "$applyTrue" or "F" eq "$applyTrue") {
		$applyLog2="FALSE";
	}
	else {
		$applyLog2="TRUE";
	}
}
elsif ($applyFalse) {
	$applyLog2="FALSE";
}


my $request = FCGI::Request();

my %data =  (
		'genofile' => 'GENOFILE',
		'phenofile' => 'PHENOFILE'
	    );

#pod2usage(-verbose => 1) if $help;
pod2usage(-verbose => 2) if $man or $help;

# We need the dual logarithm further down
my $logOf2 = log(2);

my $base="BASEDIR";
my $database="URLCSVDEPOT";

#
#  R E A D I N G   (molecular)  P H E N O T Y P E   D A T A
#

=head3 Reading Molecular Phenotype Data

The molecular phenotype data is expected to be organised in rows for
every probeset and columns for the individuals. While initialising
this script, all the rows are read, the name of every row (or whatever
identifies the probe) are mapped to the line number of that row.
There is consequently no dependency on sorting of the probsets.

Also, the names of all individuals are read. Analogously, a mapping of
the individual's ID to the position in the row is performed.

=cut

printf STDERR "opening molecular phenotype file\n" if $verbose;
my @filenames=("$base/$database/".$data{'phenofile'},"$database/".$data{'phenofile'},"$database/".$data{'phenofile'}, $data{'phenofile'});
my $opened=0;
foreach my $f (@filenames) {
	if (open(getFrom, '<', $f)) {
		$opened=1;
		print STDERR "Successfully opened file '$f' with molecular phenotypes\n";
		last;
	}
	else {
		print STDERR "Failed attempt to open molecular phenotype file '$f'.\n";
	}
}

unless ($opened) {
	die "No such pheno-file at $database$data{'phenofile'}, executed from ".cwd().": $@";
}

printf STDERR "reading molecular phenotype file into hash table\n" if $verbose;
my %probe2line;
my $individualsString = undef;
my @individualsArray = undef;
my $numLinesSkipped=0;
while( <getFrom> ){
        my $l = $_;
	# don't expect quotes
	$l =~ s/"//g;
	my ($p,$_) = split( /PHENOFIELDSEP/,$l);
	if (!defined($individualsString)) {
		# skip comments
		if ($l =~ /^\s*#/) {
			$numLinesSkipped++;
			next;
		}
		print STDERR "Undefined individualsString and p='$p'.\n" if $verbose;
		# accepting a range of keywords, also the empty first field as produced by R
		if ($p =~ /^(|id|rat|mouse|name|ind|probeset|probeset_id)$/i) {
			$individualsString = $l;
			@individualsArray=split(/PHENOFIELDSEP/,$individualsString);
			print STDERR  "individualsString now set to '$individualsString'\n" if $verbose;
		}
		elsif ($numLinesSkipped >30) {
			die "Could not find header line within first 30 lines. Exit.\n";
		}
		$numLinesSkipped++;
		next;
	}
	$probe2line{$p}=$l;
}
close(getFrom);

# some insights on the number of individuals
if ($verbose) {
	if (defined($individualsString)) {
		print STDERR "$individualsString\n";
	}
	else {
		print "E: Individuals string is not defined. Check why the header was not read.\n";
		exit(1);
	}
}

my %individualIDtoProbePosition;
for(my $i=0; $i<=$#individualsArray; $i++) {
	my $id=$individualsArray[$i];
	if (!defined($id)) {
		die "Was pointed to undefined individualsArray ID entry at position $i.\n";
	}
	elsif ($id =~ /^MT(\d+)/) {
		my $realId=$1;
		#print STDERR "\$1=$1\n";
		$individualIDtoProbePosition{"$realId"}=$i; 
		if ($realId =~ /^0+([1-9]\d*)$/) {
			print STDERR "Minimised numerical ID to '$1'.\n" if $verbose;
			$individualIDtoProbePosition{"$1"}=$i; 
		}
	}
	else {
		print STDERR "Not matching '$id'.\n" if $verbose;
	}
}


#if ($verbose) {
#	foreach my $k (keys %individualIDtoProbePosition) {
#		print STDERR "$k -> ".$individualIDtoProbePosition{$k}."\n";
#	}
#}

#
# R E A D I N G   G E N O T Y P E   F I L E
#

=head3 Reading genotype file

The genotyping data is stored together with the genotype data in a way
that is directly suitable as an input for R/qtl. The challenge for this
script is (mainly) to split the genotyping file at a particular position
and fill it with the expression data from the molecular phenotype file.

=cut
		
printf STDERR "opening genotype file\n" if $verbose;
my @genotypeLines;
my @genotypeFilenames=(
		$base.$database.$data{'genofile'},
		$database.$data{'genofile'},
		$data{'genofile'}
);
my $gfsuccess=0;
foreach my $gf (@genotypeFilenames) {
	if (open(INSERT,'<', $gf)) {
		$gfsuccess=1;
		print STDERR "Successfully opened file '$gf' with genotype information.\n";
		last;
	}
	else {
		print STDERR "Failed attempt to open genotype file '$gf'.\n";
	}
}
unless ($gfsuccess) {
	die "No such gene-file at ".$database.$data{'genofile'}.": ".$@;		#open the file wich contains probe-data
}

printf STDERR "reading genotype file into hash table\n" if $verbose;
while(<INSERT>){
	chomp;
	push (@genotypeLines,$_);
}
close(INSERT);

#
# M A I N   L O O P
#

while (FCGI::accept >= 0) {

	print "Content-type: text/plain\n\n";			#sign page-type as plain

	#check if argument has been given
	my @params;
	if (exists($ENV{'QUERY_STRING'})) {
		@params = split(/&/, $ENV{'QUERY_STRING'});
	}

	my $probeID;

	foreach my $key (@params){
		#print "key='$key'\n"; # verbose is not defined at this point, yet
		if( $key =~ m/probesetid/i ){
			my @tmp = split(/=/,$key);
			$probeID = $tmp[1];
		}
		elsif ($key =~ m/applyLog2/i ){
			my @tmp = split(/=/,$key);
			$applyLog2 = $tmp[1];
		}
	}
	
	if( !defined( $probeID ) && $#ARGV == 2 ){
		$probeID = $ARGV[2];				#id of probset to insert
	}elsif( !defined( $probeID ) && $#ARGV == 0 ){
		$probeID = $ARGV[0];				#id of probset to insert
	}


	$applyLog2 = "APPLYLOG2" unless defined($applyLog2);

	
	if( !defined( $probeID) ){
		print "Usage when accessed via web address :\t<url>?probesetid=<probesetid>\n",
		      "      When accessed via command line:\tprepareRqtlInputData.pl gene-file pheno-file probesetid\n";
		print "\n";
		print "      Valid probesets are for instance EXAMPLE_TRAITS.\n";
		exit(-1);
	}


	my $sep=",";
	if( $probeID eq 'none' ){
		my $lastElement = $#genotypeLines;			
		for( my $i=0; $i<=$lastElement; $i++ ){		#here the later returned file is splitted up to insert probeinformations, using insert subroutine
			unless (2 == $i) {
				print $genotypeLines[$i]."\n";
			}
		}
	}else{
		my @phenofields = split(/PHENOFIELDSEP/,$probe2line{$probeID});
		
		if( !@phenofields ){
			print "No such probesetID: '$probeID'. ";
			print "Some examples for probesetIDs in your system:\n";
			my @ks=keys(%probe2line);
			print "\t$ks[0]\n\t$ks[1]\n\t$ks[2]\n";
			exit(-1);
		}
		
		my $lastIndex = $#genotypeLines;			
		for (my $i=0; $i<=$lastIndex; $i++) {	# iteration over column positions, 0 is first, 
			my @iline = split(/GENOFIELDSEP/, $genotypeLines[$i]);
								# always take the first two fields
			my $id  = shift @iline;			# ID of sample, pairs with ID of individual of phenotype data
			my $name = shift @iline;		# ID of individual
			my $ret = $id.$sep.$name;		# start of line to make up from this information and return
			
								# here the later returned file is splitted up to insert the information on
								# the phenotype, i.e. the expression level.
			if( $i==0) 	# column names
			{ 					# as some lines have to be omitted, some indexshifting is required
				$ret .= $sep . $phenofields[$i];	# addition of the first (at positio 0) element of the phenotypes, i.e. the probeset ID
			}
			elsif( $i > 2 ){
				# Marker data
				if (exists($individualIDtoProbePosition{$id})) {
					my $positionOfPhenotypeInfo=$individualIDtoProbePosition{$id};
					print STDERR "Directed query on '$id' to field position '$positionOfPhenotypeInfo' "
						    ."with value $phenofields[$positionOfPhenotypeInfo] for probe '$probeID'.\n" if $verbose;
					$ret .= $sep;
					my $expressionValue=$phenofields[$positionOfPhenotypeInfo];
					if ("TRUE" eq "$applyLog2") {
						my $expressionValueOffset = 50;
						if (-$expressionValueOffset < $expressionValue) {
							$ret .= log($expressionValue+$expressionValueOffset)/$logOf2;
						}
						else {
							$ret .= "NA";
						}
					}
					else {
						$ret .= $expressionValue;
					}
				}
				else {
					die "Cannot find phenotype data for probe '$probeID' and individual '$id'.\n";
				}
			}
			elsif( 1==$i # Chromosomes
				or
			       2==$i # Centimorgan
			){
				$ret .= $sep;
			}

			$ret .= $sep;
			$ret .= join($sep,@iline);		# add remaining genotype data
			$ret .= "\n";

			print $ret;
		}
	}
}
