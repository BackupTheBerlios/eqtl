#
TEMPLATEWARNINGHASH
#
# Authors: Jan Kolbaum 
#          Steffen Moeller <moeller@inb.uni-luebeck.de>
#          University of LÃ¼beck, 2008
#
#   This script is started to execute a varying number of
#   jobs during a time specified in hours and passed via the
#   environment variable TIMEOUT.
#

# Test if the package qtl is already installed 
# and install if not already present.
# a<-library()
# if ( ! "qtl" %in% a$results[,"Package"]) {
# 	install.packages("qtl")
# }

# Load the library R/qtl (http://www.rqtl.org).
# It can by installed directly via CRAN (http://cran.r-project.org)
# via the install.packages("qtl") command. Also, packages
# for Debian and Ubuntu are available. The latest version should
# be chosen, at least one greater than 1.09-43 to ensure
# the coverage of X chromosomes.
library(qtl)

# It is beneficial to determine the maximal time that a job
# shall be eligible to compute.
timeout <- as.numeric(Sys.getenv("TIMEOUT"))
if (is.na(timeout)) {
	timeout <- RECALCTIMEOUT;
}

# It may be helpful to determine the maximal number
# of jobs that should be executed, also to ensure
# that this script eventually ends.
jobnomax <- as.numeric(Sys.getenv("JOBNOMAX"))
if (is.na(jobnomax)) {
	jobnomax <- -1;
}


# specification of directory in which to store results
d <- "RECALCDIR"

if( !file.exists(d) ){dir.create(d);}

start <- Sys.time()

# unit in which to compare the time
u <- "hours"

# counter of jobs
jobno<-0

while( (-1 == jobnomax || jobno < jobnomax) && (-1 == timeout || as.double(difftime(Sys.time(), start, unit=u))<timeout) ){
	jobno<-jobno+1
	cat(paste("Starting job #",jobno," (max=",jobnomax,") at delta time ",difftime(Sys.time(), start, unit=u),".\n",sep=""))
	a<-setdiff(ls(all=TRUE),c("d","u","timeout","start","jobno","jobnomax"))
	rm(list=a)
	try(source("http://RECALCHOST:RECALCPORT/RECALCPATH?h=RECALCHOST&p=RECALCPORT&d=RECALCDIR"))
}

cat("Running past max compute time of ",timeout," ",u,". Performed on ",jobno," jobs.\n",sep="")
