#!/usr/bin/perl -w

TEMPLATEWARNINGHASH

=head1 NAME

deduceDatabaseCols.pl - updates a series of attributes in table 'qtl'

=head1 SYNOPSIS

deduceDatabaseCols.pl optionslist

=head1 DESCRIPTION

The upload of a result file to the server will not set all attributes of
the 'qtl' and 'locus' tables. Some attributes will need to be inspected in
conjunction with extra information that is known about the traits themselves,
i.e. their chromosomal location.

=head1 OPTIONS

Passing any of these "words" (without a hyphen or other prefixes) will invoke
the corresponding action.

=over 4 

=item qtlCis

sets attribute to determine if the gene is residing on the same chromosome as the locus

=item qtlCisDist

if a gene is on the same chromosome, then this attribute will tell the distance

=item liCis

for interacting loci, this attribute is set iff any of the two loci is on the same chromosome as the gene that is modelled

=item liCisDist

the distance from the interaction's peak to the locu

=item locComb

sets for every locus interaction the locusCombination attribution, informing about how often that combination of locus is found.

#=item ratGenes
#

=item qtlPos

Transforms information on centiMorgan into Megabasepairs.

=item all

=back


=head1 AUTHORS

Ann-Kristin Gimmm <grimm@inb.uni-luebeck.de>

=head1 COPYRIGHT

University of LE<uuml>beck, 2009

=cut

#FIXME:
#extend documentation
#updates cis information.
use DBI;
use LWP::Simple;

my $dbh = DBI->connect( DATABASECON ) || die "Database connection not made: $DBI::errstr";

$| = 1;

my %toDo = 	(
			'qtlCis' => 0,
			'qtlCisDist' => 0,
			'liCis' => 0,
			'liCisDist' => 0,
			'locComb' => 0,
			'ratGenes' => 0,
			'all' => 0,
			'qtlPos' => 0
		);

if( @ARGV ) {
	foreach my $com (@ARGV){
		if( defined( $toDo{$com} ) ){
			$toDo{$com} = 1;
		}
	}
} else {
	die "USAGE: ".$0." [ qtlCis | qtlCisDist | liCis | liCisDist | locComb | ratGenes | all | qtlPos]*\n";
}

my $start = time;

# Update cis information in table locus
if( $toDo{'qtlCis'}==1 || $toDo{'all'}==1 ) {
	print "\tUPDATING: cis informations (qtl):\t\t\t\t";
	my $sth = $dbh->prepare("UPDATE qtl as l JOIN (SELECT qtl.No, TRAITSDETAILSCHIPDATA.seqname, qtl.Locus FROM locus JOIN qtl ON qtl.Locus=locus.Name JOIN TRAITSDETAILSCHIPDATA on qtl.Trait=TRAITSDETAILSCHIPDATA.probeset_id) AS x ON (x.No=l.No) SET cis=(l.Chromosome=x.seqname)")
			or die "Couldn\'t prepare statement: " . $dbh->errstr;
	$sth->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
	$sth->finish;
	print "\t\t[DONE]\n";
}

if( $toDo{'qtlPos'}==1 || $toDo{'all'}==1){
	print "\tCALCULATING Mbp positions:\t\t\t\t";
	my $sth = $dbh->prepare("SELECT No, Locus, Trait, cMorgan_Peak, Chromosome FROM qtl WHERE LOD IS NOT NULL ORDER BY Locus") or die "Couldn\'t prepare statement: " . $dbh->errstr;
	$sth->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
	my $locus = "";
	my $locPos = 0;
	while( my @data = $sth->fetchrow_array() ){
		my $cM=$data[3];
		$cM = $cM.".0" unless $cM =~ /\./;
		if( $locus ne $data[1] ) {
# 			$locPos = get "URLFILEHAND?get_bp=on&cM=".$data[3]."&chromosome=".$data[4];
			#$locPos = get "http://grid64inb.inb.uni-luebeck.de/~grimm/stockholm/eqtl/filehandler?get_bp=on&cM=".$cM."&chromosome=".$data[4];	
			$locPos = get "URLEQTL/filehandler?get_bp=on&cM=".$cM."&chromosome=".$data[4];	
		}
		if($locPos=~ /Not enough data<br>parameters/){
			print "$data[0], $data[1], $data[2],  $data[3], $data[4]\n";
		}
		$locPosMb = $locPos/1000000;
		$locPosMb = sprintf("%.2f",$locPosMb);
		my $sth_tmp = $dbh->prepare("UPDATE qtl SET Mbp_Peak =".$locPosMb." WHERE No=\"".$data[0]."\"") or die "Couldn\'t prepare statement: " . $dbh->errstr;
		$sth_tmp->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
		$sth_tmp->finish;
	}
	$sth->finish;
	print "\t\t[DONE]\n";
}

if( $toDo{'qtlCisDist'}==1 || $toDo{'all'}==1 ) {
	print "\tCALCULATING DISTANCES (cis-qtl):\t\t\t\t";
	my $sth = $dbh->prepare("SELECT q.No, Locus, Trait, cMorgan_Peak, l.Chr, b.start, b.stop FROM qtl AS q JOIN locus AS l ON l.Name = Locus JOIN TRAITSDETAILSCHIPDATA AS b ON Trait = b.probeset_id WHERE LOD IS NOT NULL ORDER BY Locus") or die "Couldn\'t prepare statement: " . $dbh->errstr;
	$sth->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
	my $locus = "";
	my $locPos = 0;
	while( my @data = $sth->fetchrow_array() ){
		my $cM=$data[3];
		$cM = $cM.".0" unless $cM =~ /\./;
		if( $locus ne $data[1] ) {
# 			$locPos = get "URLFILEHAND?get_bp=on&cM=".$data[3]."&chromosome=".$data[4];
			$locPos = get "http://grid64inb.inb.uni-luebeck.de/~kolbaum/stockholm/eqtl/filehandler?get_bp=on&cM=".$cM."&chromosome=".$data[4];	
		}
# 		die ">>".$locPos."\nhttp://grid64inb.inb.uni-luebeck.de/~kolbaum/stockholm/eqtl/filehandler?get_bp=on&cM=".$data[3]."&chromosome=".$data[4]."\n";
		my $distance = abs($locPos-(($data[5]+$data[6])/2));
		my $sth_tmp = $dbh->prepare("UPDATE qtl SET cis_dist=\"".$distance."\" WHERE No=\"".$data[0]."\" AND cis=\"1\"") or die "Couldn\'t prepare statement: " . $dbh->errstr;
		$sth_tmp->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
		$sth_tmp->finish;
	}
	$sth->finish;
	print "\t\t[DONE]\n";
}

# Update cis information in table locusInteraction
if( $toDo{'liCis'}==1 || $toDo{'all'}==1 ) {
	print "\tUPDATING: cis informations (locusInteraction):\t\t\t";
	$sth = $dbh->prepare("UPDATE locusInteraction AS l JOIN (SELECT li.No, bea.probeset_id, bea.seqname, A.Chr AS A_Chr, B.Chr AS B_Chr FROM locusInteraction AS li JOIN locus AS A ON ( li.A=A.Name ) JOIN locus AS B ON (B.Name=li.B) JOIN TRAITSDETAILSCHIPDATA AS bea ON (li.Trait=bea.probeset_id)) AS x ON (l.No=x.No) SET l.cis=(IF((x.A_Chr=x.seqname)&&(x.B_Chr=x.seqname), '11', NULL))")
			or die "Couldn\'t prepare statement: " . $dbh->errstr;
	$sth->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
	$sth->finish;
	$sth = $dbh->prepare("UPDATE locusInteraction AS l JOIN (SELECT li.No, bea.probeset_id, bea.seqname, A.Chr AS A_Chr FROM locusInteraction AS li JOIN locus AS A ON ( li.A=A.Name ) JOIN TRAITSDETAILSCHIPDATA AS bea ON (li.Trait=bea.probeset_id) WHERE li.cis IS NULL) AS x ON (l.No=x.No) SET l.cis=(IF((x.A_Chr=x.seqname), '01', NULL))")
			or die "Couldn\'t prepare statement: " . $dbh->errstr;
	$sth->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
	$sth->finish;
	$sth = $dbh->prepare("UPDATE locusInteraction AS l JOIN (SELECT li.No, bea.probeset_id, bea.seqname, B.Chr AS B_Chr FROM locusInteraction AS li JOIN locus AS B ON ( B.Name=li.B ) JOIN TRAITSDETAILSCHIPDATA AS bea ON (li.Trait=bea.probeset_id) WHERE li.cis IS NULL) AS x ON (l.No=x.No) SET l.cis=(IF((x.B_Chr=x.seqname), '10', NULL))")
			or die "Couldn\'t prepare statement: " . $dbh->errstr;
	$sth->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
	$sth->finish;
	$sth = $dbh->prepare("UPDATE locusInteraction SET cis='00' WHERE cis IS NULL")
			or die "Couldn\'t prepare statement: " . $dbh->errstr;
	$sth->execute() or die "Couldn\'t execute statement: " . $sth->errstr;
	$sth->finish;
	print "\t\t[DONE]\n";
}

# Update locCom (locusCombination) column
if( $toDo{'locComb'}==1 || $toDo{'all'}==1 ) {
	print "\tRETRIEVING: informations on locusInteractions:\t\t\t";
	$sth = $dbh->prepare("SELECT A, B, COUNT(*) FROM locusInteraction GROUP BY A,B")
			or die "Couldn\'t prepare statement: " . $dbh->errstr;
	$sth->execute() or die "Couldn\'t execute statement: " . $sth->errstr;

	my $counter=0;
	my %combHash;
	my $lastA = '';
	while( my @data = $sth->fetchrow_array() ){
		$combHash{ $data[0]." ".$data[1] } = $counter++;
	}
	$sth->finish;
	print "\t\t[DONE]\n";
	
	$sth = $dbh->prepare("UPDATE locusInteraction SET locComb=? WHERE A=? AND B=?")
			or die "Couldn't prepare statement: " . $dbh->errstr;

	print "\tUPDATING: locus combination informations (locusInteraction):\t";
	my $cnt = 0;
	my $max = $counter/100;
	foreach my $key (keys %combHash){
		my ($A, $B) = split(/ /, $key);
		$sth->execute( $combHash{$key}, $A, $B) or die "Couldn't execute statement: " . $sth->errstr;
	}
	$sth->finish;
	print "\t\t[DONE]\n";
}

# Get rat gene ids belonging to each locus
if( $toDo{'ratGenes'}==1 || $toDo{'all'}==1 ) {
	
}

my $runtime = time - $start;
print"\n\tThese operations took about: ".$runtime." seconds.\n"
