#!/bin/sh

TEMPLATEWARNINGHASH

set -e

dbhost_eqtl=${DBHOSTEQTL:-DATABASEHOSTLOCAL}
dbhost_qtl=${DBHOSTQTL:-DATABASEHOSTLOCAL}
usereqtl=${DBUSEREQTL:-DATABASEEQTLUSER}
userqtl=${DBUSERQTL:-DATABASEQTLUSER}
nameeqtl=${DBNAMEEQTL:-DATABASEEQTLNAME}
nameqtl=${DBNAMEQTL:-DATABASEQTLNAME}

d=$(date +"%Y%m%d")

if [ "-h" = "$1" -o "--help" = "$1" ]; then
	cat <<EOHELP
NAME

  `basename $0` - dump of an expression QTL database into two text files

SYNOPSIS

  The script does not take any arguments.

ENVIRONMENT

  For expression QTL

  DBHOSTEQTL  - sets mysql server from which to dump data, defaults to 'DATABASEHOSTLOCAL'
  DBUSEREQTL  - sets the mysql user with which to log in, defaults to 'DATABASEEQTLUSER'
  DBNAMEEQTL  - sets the name of the database that needs to be dumped, defaults to 'DATABASEEQTLNAME'

  For classical QTL substitute EQTL with QTL in the variable names listed above.

SEE ALSO

  database_upload.sh - script to upload that data to localhost that were dumped with this script

AUTHOR

  Steffen Moeller <moeller@inb.uni-luebeck.de>

COPYRIGHT

  GPL3+

EOHELP
fi


mysqldump=$(which mysqldump)
if [ -z "$mysqldump" ]; then
	echo "Please install the mysqldump application."
	exit 1
fi

echo -n "Backing up database '$nameeqtl'"

if $mysqldump -h $dbhost_eqtl -u $usereqtl $nameeqtl | gzip -c9 > backup_db_${nameeqtl}_${d}.sql.gz ; then
	echo " [ok]"
else
	echo " [failed]."
fi

echo -n "Backing up database '$nameqtl'"
if $mysqldump -h $dbhost_qtl -u $userqtl $nameqtl | gzip -c9 > backup_db_${nameqtl}_${d}.sql.gz ; then
	echo " [ok]"
else
	echo " [failed]"
fi

echo "done."

