#!/usr/bin/perl -w

TEMPLATEWARNINGHASH

=head1 NAME

uploadExpectedFiles - prepare table 'computation' of workunits

=head1 SYNOPSIS

	uploadExpectedFiles --analysis=(scanone|scantwo|both) none\n"
	uploadExpectedFiles --analysis=(scanone|scantwo|both) <covariates>\n"
	uploadExpectedFiles --list | -ls | list \n"
	uploadExpectedFiles --help | -h  | help | --man  | man\n";

=head1 DESCRIPTION

The workunits, i.e. combinations of traits with covariates and the analysis to be perfomed,
are stored in the table 'computation'. That table will be queried when new work is demanded
from grid jobs and is updated when the results are uploaded to the database.

=head1 OPTIONS

Options for thresholds etc are coming from the files in conf/* . One
cannot change the parameters for a job once it was computed, i.e. for
such changes one would need to create a new entry showing the same set
of covariates but a different job name.

=over 4

=item --analysis 

=over 8

=item scanone

Analysis for single locus' effects

=item scantwo

Analysis for two locus' effects

=item both

Perform both, scanone and scantwo

=back

=item --list

Presents the calculations already in the system.

=item --help, --man

Short and long summary of instructions.

=item --list-covariates

Display of covariates that may be added for the analysis.

=item covariates

list of covariates, for indicating their modelling as additive or
interacting, add the suffix "_add" or "_int", respectively. The empty
list of covariates is indicated by the string 'none'.

The case of covariates needs to be reflected properly - not for the
internal representation in the database, so please ensure that all
traits can be distinguished after being transformed to lower case,
but for R/qtl.

=back

The traits (molecular phenotypes) to be calculated are retrieved from the table 'traits'.

=head1 SEE ALSO

There are scripts to reassign the status of the job descriptions in the
here prepared table 'computation'. See computation, processing,
recalculate, reprocessing.

=head1 AUTHORS

Jan Kolbaum,
Ann-Kristin Grimm <grimm@inb.uni-luebeck.de>,
Benedikt Bauer <bauer@cls.uni-luebeck.de>,
Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>

=head1 COPYRIGHT

University of LE<uuml>beck, 2009-2010

=cut

use strict;
use Cwd;
use DBI;
use Pod::Usage;
use Getopt::Long;

TEMPLATEWARNINGHASH

my $analysis;
my $dir;
my $help;
my $man;
my $list;
my $listCovariates;
my $verbose;

GetOptions("verbose" =>\$verbose,
	"help" => \$help,
	"man" => \$man,
	"list" => \$list,
	"list-covariates" => \$listCovariates,
	"analysis:s" => \$analysis
) or die "Could not parse options.\n";

TEMPLATEWARNINGHASH

my @A=@ARGV;

pod2usage(-verbose => 1) if $help;
pod2usage(-verbose => 2) if $man;

print "key params: analysis:$analysis \@A:".join(",",@A)."\n" if $verbose;

my $dbh = DBI->connect( DATABASECON ) or die "Database connection to expression QTLs could not be established: $DBI::errstr";

# variable containing a row
my @r;


if ($list or $listCovariates) {

    if ($list) {
	my $list_query = "select distinct application, filename from computation;";
	my $sth_list = $dbh->prepare($list_query) or die $DBI::errstr;
	$sth_list -> execute() or die $DBI::errstr;
	my $prev="";
	my %past;
	while(@r = $sth_list->fetchrow_array()) {
		my $a=$r[0];
		my $f=$r[1];
		if ($f =~ /\(([^)]+)/) {
			unless(exists($past{"$a:$1"})) {
				$past{"$a:$1"}=0;  # to rest completely assured
			}
			$past{"$a:$1"} += 1;
		}
	}
	foreach my $k (sort keys %past) {
		print "$k (".$past{$k}.")\n";
	}
    }

    if ($listCovariates) {
	my $list_query = "describe qtl;";
	my $sth_list = $dbh->prepare($list_query) or die $DBI::errstr;
	$sth_list -> execute() or die $DBI::errstr;
	while(@r = $sth_list->fetchrow_array()) {
		my $a=$r[0];
		next unless $a =~ /covariates/i;

		my $v = $r[1];
		my @vv = split(/set\('|','|'\)/,$v);
		my %vvu;
		# taking the _int, _add away
		foreach my $vvv (@vv) {
			next unless $vvv =~ /_/;
			my ($vvvv,$addInt);
			($vvvv,$addInt) = split(/_/,$vvv);
			if (exists($vvu{$vvvv})) {
				push @{$vvu{$vvvv}},$addInt;
			}
			else {
				$vvu{$vvvv}=[$addInt];
			}
		}
		foreach my $k (sort keys %vvu) {
			print "$k\t(".join(",",@{$vvu{$k}}).")\n";
		}
	}
    }
    exit 0;
}


if( !defined($analysis) or $analysis ne 'scanone' and $analysis ne 'scantwo' and $analysis ne 'both' ){
	die "Usage: uploadExpectedFiles --analysis (scanone|scantwo|both) covariates\nInvalid analysis: '".(defined($analysis)?$analysis:"undef")."'\n"; 
}

# presume the remaining attributes to be all covariates - unchecked
my @covar = @A;

my $test_query = "SELECT computation_id FROM computation WHERE jobname=?;";
my ($sth_test, $sth_update, $sth_insert, $sth_traits);

unless (defined($sth_test = $dbh->prepare($test_query))) {
	print STDERR "$DBI::errstr";
	$dbh->disconnect;
	exit(-1);
}

my $update_query ="UPDATE computation SET status='RECALCULATE' WHERE jobname=?;";
unless (defined($sth_update = $dbh->prepare($update_query))) {
        print STDERR "$DBI::errstr";
	$dbh->disconnect;
	exit(-1);
}


my $insert_query = "INSERT INTO computation(status, application, trait_id, jobname, filename) VALUES('QUEUED',?,?,?,?);";
unless (defined($sth_insert = $dbh->prepare($insert_query))) {
        print STDERR "$DBI::errstr";
	$dbh->disconnect;
	exit(-1);
}


print "\tRETRIEVING TRAIT NAMES\t\t\t";
$sth_traits = $dbh->prepare("SELECT trait_id FROM trait;");
if ( ! $sth_traits -> execute()) {
	print STDERR $DBI::errstr;
	$dbh->disconnect;
	exit(-1);
}

my @traits;
while (@r=$sth_traits->fetchrow_array()) {
	push(@traits,$r[0]);
}
print "[DONE]\n";

print "\tCREATING EXPECTED FILE INDEX\n";
foreach my $cov (@covar) {

	unless ($cov =~ /_(add|int)$/ or $cov eq "none") {
		print STDERR "Skipping covariate '$cov', which does not end on _add or _int.\n";
		next;
	}

	if ( $analysis eq 'both' or $analysis eq 'scanone') {	
		print "\t\t$cov scanone\n";
		foreach my $line (@traits) {
							   # T H R E S H O L D - minimal LOD score to achieve
			                                            # P E R M S - number of permutations
			my $jobname = "scanone_".${line}."_THRESHOLD_PERMS_($cov).csv.gz";

			# checking for existance of that job
			if ( ! $sth_test->execute($jobname)) {
				print STDERR $DBI::errstr;
			        $dbh->disconnect;
				exit(-1);
			}
			my $query;
 			my @a = $sth_test->fetchrow_array();
			#print "\@a = (" . join(",",@a).")\n" if $verbose;
			if(@a){
				if ( ! $sth_update->execute($jobname)) {
					print STDERR $DBI::errstr;
					$dbh->disconnect;
					exit(-1);
				}
			}
			else{
				if ( ! $sth_insert->execute('SCANONE',$line,$jobname,$jobname)) {
					print STDERR $DBI::errstr;
					$dbh->disconnect;
					exit(-1);
				}
			}
		}
	}

	if ($analysis eq 'both' or $analysis eq 'scantwo') {
		print "\t\t$cov scantwo\n";
		foreach my $line (@traits) {
							   # T H R E S H O L D - minimal LOD score to achieve
			                                          # P E R M S - number of permutations
			my $jobname = "scantwo_".${line}."_THRESHOLD_PERMS_($cov).csv.gz";

			# checking for existance of that job
			if ( ! $sth_test->execute($jobname)) {
				print STDERR $DBI::errstr;
				$dbh->disconnect;
				exit(-1);
			}

			my $query;
 			my @a = $sth_test->fetchrow_array();
			if(@a){
				if ( ! $sth_update->execute($jobname)) {
					print STDERR $DBI::errstr;
					$dbh->disconnect;
					exit(-1);
				}
			}
			else{
				if ( ! $sth_insert->execute('SCANTWO',$line,$jobname,$jobname)) {
					print STDERR $DBI::errstr;
					$dbh->disconnect;
					exit(-1);
				}
			}
		}
	}
}
print "\t[DONE]\n";

$dbh->disconnect;


