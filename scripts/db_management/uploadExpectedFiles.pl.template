#!/usr/bin/perl -w

TEMPLATEWARNINGHASH

=head1 NAME

uploadExpectedFiles - prepare table 'computation' of workunits

=head1 SYNOPSIS

uploadExpectedFiles analysis covariates

=head1 DESCRIPTION

The workunits, i.e. combinations of traits with covariates and the analysis to be perfomed,
are stored in the table 'computation'. That table will be queried when new work is demanded
from grid jobs and is updated when the results are uploaded to the database.

=head1 OPTIONS

=over 4

=item analysis 

=over 8

=item scanone

Analysis for single locus' effects

=item scantwo

Analysis for two locus' effects

=item both

Perform both, scanone and scantwo

=back

=item covariates

list of covariates, for indicating their modelling as additive or
interacting, add the suffix "_add" or "_int", respectively. The empty
list of covariates is indicated by the string 'none'.

=back

The traits to be calculated are retrieved from the table 'traits'.

=head1 AUTHORS

Jan Kolbaum,
Ann-Kristin Grimm <grimm@inb.uni-luebeck.de>,
Benedikt Bauer <bauer@cls.uni-luebeck.de>,
Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>

=head1 COPYRIGHT

University of LE<uuml>beck, 2009

=cut

use strict;
use Cwd;
use DBI;

my $mode;
my $dir;
if( $#ARGV < 0 ){
	die "Usage: uploadExpectedFiles (scanone|scantwo|both) covariates\n";
}

my @A=@ARGV;
$mode = shift @A;
if( $mode ne 'scanone' && $mode ne 'scantwo' && $mode ne 'both' ){
	die "Usage: uploadExpectedFiles (scanone|scantwo|both)\nInvalid mode of analysis: '".$mode."'\n"; 
}

my $dbh = DBI->connect( DATABASECON ) || die "Database connection not made: $DBI::errstr";


# presume the remaining attributes to be all covariates - unchecked
my @covar = @A;

my $test_query = "select computation_id from computation where jobname=?;";
my $sth_test = $dbh->prepare($test_query) || die $DBI::errstr;

my $update_query ="UPDATE computation SET status='RECALCULATE' where jobname=?;";
my $sth_update = $dbh->prepare($update_query) || die $DBI::errstr;

my $insert_query = "INSERT INTO computation(status, application, trait_id, jobname, filename) VALUES('QUEUED',?,?,?,?);";
my $sth_insert = $dbh->prepare($insert_query) || die $DBI::errstr;


print "\tRETRIEVING TRAIT NAMES\t\t\t";
my $sth_traits = $dbh->prepare("select trait_id from trait;");
$sth_traits -> execute() || die $DBI::errstr;
my @traits;
my @r;
while (@r=$sth_traits->fetchrow_array()) {
	push(@traits,$r[0]);
}
print "[DONE]\n";

print "\tCREATING EXPECTED FILE INDEX\t\t\t";
foreach my $cov (@covar) {

	unless ($cov =~ /_(add|int)$/ || $cov eq "none" ) {
		print STDERR "Skipping covariate '$cov', which does not end on _add or _int.\n";
		next;
	}

	foreach my $line (@traits) {
		if( $mode eq 'both' || $mode eq 'scanone' ){	
							   # T H R E S H O L D - minimal LOD score to achieve
			                                            # P E R M S - number of permutations
			my $jobname = "scanone_".${line}."_THRESHOLD_PERMS_($cov).csv.gz";

			# checking for existance of that job
			$sth_test->execute($jobname) || die $DBI::errstr;	
			my $query;
 			my @a = $sth_test->fetchrow_array();
			if(@a){
				$sth_update->execute($jobname) || die $DBI::errstr;
			}
			else{
				$sth_insert->execute('SCANONE',$line,$jobname,$jobname);
			}
		}
		if( $mode eq 'both' || $mode eq 'scantwo' ){
							   # T H R E S H O L D - minimal LOD score to achieve
			                                          # P E R M S - number of permutations
			my $jobname = "scantwo_".${line}."_THRESHOLD_PERMS_($cov).csv.gz";

			# checking for existance of that job
			$sth_test->execute($jobname) || die $DBI::errstr;	
			my $query;
 			my @a = $sth_test->fetchrow_array();
			if(@a){
				$sth_update->execute($jobname) || die $DBI::errstr;
			}
			else{
				$sth_insert->execute('SCANTWO',$line,$jobname,$jobname);
			}
		}
	}
}
print "[DONE]\n";
