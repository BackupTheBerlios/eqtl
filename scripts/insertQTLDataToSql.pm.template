package insertQTLDataToSql;

use strict;
use DBI;

use vars qw($VERSION 
	$exitcode
	%EXITCODE2TEXT
	$sth_loc
	$sth_loc_update
	$sth_loc_select
	$sth_jobexists
	$sth_reset_recalculate
	$sth_reset_queued
	$sth_getloc
	$sth_delete
	$sth_delete_interaction
	$sth_delete_qtl
	$sth_compute
	$sth_qtl_scantwo
	$sth_qtl_scanone
@ISA @EXPORT @EXPORT_OK);

require Exporter;

%EXITCODE2TEXT=(
	 "3" => "Job went technically fine, but contained no QTLs to upload.",
	 "2" => "Job was already completed, with no instruction to recalculate.",
	 "1" => "Job is in state QUEUED or RECALCULATE, and should not be available.",
	 "0" => "No error. Nothing uploaded either. The file may be a suprise.",
	"-1" => "Default error. Processing should not continue.",
	"-2" => "File corrupt. Processing should continue with another file.",
	"-3" => "Database constraints violated. Processing should not continue."
);

@ISA = qw(Exporter AutoLoader);
# Items to export into callers namespace by default. Note: do not export
# names by default without a very good reason. Use EXPORT_OK instead.
# Do not simply export all your public functions/methods/constants.
	@EXPORT = qw(
	perform
);
$VERSION = '0.02';



# Helping functions

sub getLocus($$){
	$sth_getloc->execute( $_[0], $_[1], $_[1] );
	my $ret = $sth_getloc->fetchrow_array();
	$sth_getloc->finish;
	return $ret;
}

sub setLocus($$){
	my $chr = $_[0];
	my $cM = $_[1];
	my $name = 'ic'.$chr.'.loc'.$cM;
	$sth_loc->execute( $name, $chr, $cM, undef );
	$sth_loc->finish;
	return $name;
}

=head2 harmless 

This routine decides about how to deal with errors.

=cut

sub harmless($$) {
	my $message = shift;
	my $ecode = shift;
	print "$ecode\n";
	print STDERR "$message";
	#exit ($ecode);
	$exitcode=$ecode;
}


=head2 resetStatusOfComputationForRecalculation

A function to reset the state of a job in the database.
The new state will always be "recalculate".

Arguments:

=over 4

=item $DBI

connection to database

=item $dryrun

set to value != 0 if the database shall not be contacted.

=back

=cut

sub resetStatusOfComputationForRecalculation($$$) {
	my ($dbh,$filename,$dryrun)=@_;
	my $statement_to_execute;
	#if($status =~/PROCESSING/) {
		$statement_to_execute = $sth_reset_recalculate;
	#} elsif($status =~ /REPROCESSING/) {
	#	$statement_to_execute = $sth_reset_queued;
	#}

	if ($dryrun) {
		print STDERR "Resetting database entry.\n";
	}
	else {
		if ( ! $statement_to_execute->execute("$filename") ) {
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		print "RECORD WAS RESETTED.\n";
		$statement_to_execute->finish;
	}
}



=head2 perform

This is function called externally. It does most of the work.

=over 4

=cut

sub perform {

	my ($dbh, $filename, $force, $verbose, $dryrun) = @_;

	$dryrun=0 unless defined($dryrun);

	$exitcode=-1; # default

	# Constants

	my $NULL=undef;

	# Queries to prepare (once)

=item Preparation of queries

=cut

	unless (defined($sth_loc) and defined($sth_qtl_scanone)) {
		my $sql_loc = qq{INSERT INTO locus (Name, Chr, cMorgan, Organism, Marker) VALUES (?,?,?,"NCBITAXONOMYSPECIESNAME",?)};
		my $sql_loc_update = qq{UPDATE locus set cMorgan =? where Name=?};
		my $sql_loc_select = qq{select Name, cMorgan from locus where Name=?};
		my $query_jobexists = "select computation_id, status, version from computation where jobname = ?;";
		my $reset_query_recalculate = "UPDATE computation SET status=\"RECALCULATE\" where jobname = ? ";
		my $reset_query_queued = "UPDATE computation SET status=\"QUEUED\" where jobname = ? ";			
		my $sql_getloc = qq{SELECT Name FROM locus WHERE Chr = ? AND ((cMorgan-?)>=-0.2) AND ((cMorgan-?)<=0.2)};
		my $sql_delete_interaction = "DELETE from locusInteraction where computation_id = ?";
		my $sql_delete_qtl = "DELETE from qtl where computation_id = ?";
		my $sql_compute = "UPDATE computation SET status=\"DONE\", version= ?, "
			  ."timestamp = ? where computation_id = ?";
		my $sql_qtl_scantwo = qq{INSERT INTO  locusInteraction (computation_id, Trait,A, B, LogP, covariates, lod_full, lod_fv1, lod_int, lod_add, lod_av1, qlod_full, qlod_fv1, qlod_int, qlod_add, qlod_av1, pvalue_full, pvalue_fv1, pvalue_int, pvalue_add, pvalue_av1) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)};
		my $sql_qtl_scanone = qq{INSERT INTO  qtl (computation_id, Locus, Trait, LOD, pvalue, Chromosome, cMorgan_Peak, Quantile, covariates, phenocol) VALUES (?,?,?,?,?,?,?,?,?,?)};

		$sth_loc = $dbh->prepare( $sql_loc );
		$sth_loc_update = $dbh->prepare( $sql_loc_update );
		$sth_loc_select = $dbh->prepare( $sql_loc_select );
		$sth_jobexists = $dbh->prepare($query_jobexists);
		if ($@) {
			print STDERR "Could not prepare query 'sth_jobexists': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		$sth_reset_recalculate = $dbh->prepare($reset_query_recalculate);
		if ($@) {
			print STDERR "Could not prepare query 'sth_reset_calculate': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		$sth_reset_queued = $dbh->prepare($reset_query_queued);
		if ($@) {
			print STDERR "Could not prepare query 'sth_reset_queued': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		$sth_getloc = $dbh->prepare( $sql_getloc );
		if ($@) {
			print STDERR "Could not prepare query 'sth_getloc': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		$sth_delete_interaction = $dbh->prepare($sql_delete_interaction);
		if ($@) {
			print STDERR "Could not prepare query 'sth_delete_interaction': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		$sth_delete_qtl = $dbh->prepare($sql_delete_qtl);
		if ($@) {
			print STDERR "Could not prepare query 'sth_delete_qtl': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		$sth_compute = $dbh->prepare($sql_compute);
		if ($@) {
			print STDERR "Could not prepare query 'sth_compute': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		$sth_qtl_scantwo = $dbh->prepare($sql_qtl_scantwo);
		if ($@) {
			print STDERR "Could not prepare query 'sth_qtl_scantwo': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
		$sth_qtl_scanone = $dbh->prepare($sql_qtl_scanone);
		if ($@) {
			print STDERR "Could not prepare query 'sth_qtl_scanone': $@\n";
			harmless($DBI::errstr,-1);
			return($exitcode);
		}
	}

=item opening file and reading all lines into single variable 

=cut

	unless(defined($filename)) {
		print STDERR "insertQTLDataToSql.pm: perform: filename not defined.\n";
		exit(-1);
	}

	unless ( -r "$filename" ) {
		print STDERR "insertQTLDataToSql.pm: perform: file not found: '$filename'.\n";
		exit(-1);
	}

	if ($filename =~ /.gz$/) {
		open (FH,"gzip -dc '$filename' |") or die "Could not uncompress and open file '$filename': $@\n";
	}
	else {
		open (FH,"<$filename") or die "Could not open file '$filename': $@\n";
	}

	# @file represents all the lines in the file
	my @file = <FH>;
	close(FH);


	my ( $trait, $method, $perms, $threshold, $covars, $alpha, $steps, $errorP, $draws, @quant, $success, $phenocol );
	my @covars_array;

	my $cov_meth = 'int';
	my $warnLevel = 'lazy';

	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime((stat($filename))[9]);
	$year += 1900;
	my $filetime = "$year-$mon-$mday $hour:$min:$sec";

	my @filename_array = split(/\//, $filename);
	# FIXME: "basename" should be used instead ... good for now
	$filename = pop(@filename_array);

=item check if file is corrupted

=cut

	if( -1 == $#file or ($file[0] !~ /^<=/) or ($file[0] !~ /=>$/) ){
		harmless("\tERROR: wrong beginning of file!!!\n\t>>$file[0]<<\n",-2);
		return($exitcode);
	}

=item  check if job is in database

=cut 

	my $cnt = 0;
	my $compute_id;
	my $status = undef;
	my $version;

	if ( ! $sth_jobexists->execute("$filename")) {
		harmless($DBI::errstr,-1);
		return($exitcode);
	}
	while( my @data = $sth_jobexists->fetchrow_array() ){
		$compute_id = $data[0];
		$status = $data[1];
		$version = $data[2];
		$cnt++;
	}
	$sth_jobexists->finish;

	if ($dryrun and !defined($status)) {
		print "Failed to find computation with that jobname - continuing with faked values to allow testing of parsing.\n" if $verbose;
		$cnt=1; 
		$status="PROCESSING";
		$version="dryrun";
	}

	if($cnt>1){
		harmless("More than one entry for job found (cnt=$cnt). please check database\n",-3); ## this is not expected, database likely to be corrupt
		return($exitcode);
	}
	if($cnt ==0){
		harmless("No entry for job found. Please verify database consistency.\n",-1);## every entry request should be existing
		return($exitcode);
	}

=item  decide over job status if result file should be uploaded

=cut 

	if (!defined($status) or "" eq "$status") {
		harmless("Undefined or empty status of job '$filename'.\n",-1);
		return($exitcode);
	}
	elsif($status =~ /QUEUED/){
		$exitcode = 1;
	}
	elsif($status =~ /RECALCULATE/){
		$exitcode = 1;
	}
	elsif($status =~ /DONE/){
		$exitcode = 2;
		harmless("Job '$filename' was already uploaded, please check if you want to upload it anyway\n",$exitcode);
	#	return($exitcode);
	}
	elsif($status =~ /PROCESSING/){
		# This is where the job should be (PROCESSING or REPROCESSING)
		$exitcode = 0;
	}
	else {
		harmless("Unknown status: '$status' of file '$filename'.\n",-1);
		return($exitcode);
	}


	if(($status =~ /QUEUED/ && !$force) or ($status =~ /DONE/ && !$force)){
		print "$exitcode\n";
		harmless("$filename was not marked to be processed. "
			."To upload the data anyway use the option --force\n",$exitcode);
		return($exitcode);
	}

	print "\tfilename: $filename status: $status\n";


##############################

=item parsing of result file

=over 8

=cut

##############################

	my %committed_loci;

	my $sectioncount = 0;
	my $scantwo = 0;

=item parse covariates from filename

=cut

	my @fields;
	if (@fields=$filename=~/^([^_]+)_([^_]+)_([^_]+)_([^_]+)_\(([^)]+)\)/) {
		$covars = $fields[4];
	}

=item check for finding header twice, and flag computation to recalculate if this has happened.

=cut

	for( my $lineno=0; $lineno<=$#file; $lineno++ ) {
		my $line = $file[$lineno];
		if( $line =~ /^<=/ && $line =~/=>$/ ) {
			if( $lineno!=0 ) {
				print "\tWARNING: corrupted File, contains the header twice!!!\n";
				resetStatusOfComputationForRecalculation($dbh,$filename,$dryrun);
				harmless("\tERROR: corrupted file, contains too much data!!!\n"
					."\t\tThis file will not be  comitted, but deleted, set to recalculate list as warninglevel is strict!\n",-2);
				return($exitcode);
			}

			my @tmpLineCloseBrace = split(/\)\s/, $line);
			for( my $parameterNo=0; $parameterNo<=$#tmpLineCloseBrace; $parameterNo++ ) {
				#FIXME: some more elegance should eventually find entry here
				if( $tmpLineCloseBrace[$parameterNo] =~ /scanone/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$trait = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /scantwo/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$trait = $temp[1];
					$scantwo = 1;
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /method/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$method = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /permutations/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$perms = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /threshold/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$threshold = $temp[1];
			#	}elsif( $tmpLineCloseBrace[$parameterNo] =~  /covariates/ ){		# covariates will be parsed from the filename at the moment
			#		my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
			#		$covars = $temp[1];
			#		if( !defined($covars) or $covars eq '' ){ $covars = 'none';}
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /alpha/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$alpha = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /steps/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$steps = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /errorP/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$errorP = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /draws/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$draws = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /success/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$success = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /cov_meth/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$cov_meth = $temp[1];
				}elsif( $tmpLineCloseBrace[$parameterNo] =~  /phenocol/ ){
					my @temp = split( /\(/, $tmpLineCloseBrace[$parameterNo]);
					$phenocol = $temp[1];
					if($phenocol =~ m/=/){$phenocol='';}
				}
			} # end of iteration over all status parameters

			if( !defined( $phenocol ) ){
				$phenocol = $trait;
			}

			next ; 

		} # end of special treatment of header line

		next if $line =~ /^\s*#/; # allow for comments
		next if $line =~ /^\s*$/; # skip empty lines
	
		if( $line =~ /^<\// ) {
			if( --$sectioncount < 0 ){
				resetStatusOfComputationForRecalculation($dbh,$filename,$dryrun);
				harmless("\tERROR: can\'t close more sections\n",-2); # file is broken
				return($exitcode);
			}
		}
		elsif( $line =~ /^</ && !($line =~ /^<=/) ){
			$sectioncount++;
		}

		if( $line =~ /<ENV>/ ){
			# assume old format
			my $time = $file[$lineno+3];
			$time = $file[$lineno+2] if $time =~ /^s*$/; # empty line
			if ($time =~ /^Time:\s*(\S+.*)/) {
				$time = $1;
			}
			if ($time =~ /ENV/) {
				# file is broken
				resetStatusOfComputationForRecalculation($dbh,$filename,$dryrun);
				harmless("The ENV section does not have time information properly indicated.\n",-2);
				return($exitcode);
			}

			# checking if time was printed as "number of seconds" or as real time
			if ($time =~ /^\d+$/) {
				($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($time);
				$year += 1900;
				$filetime = "$year-$mon-$mday $hour:$min:$sec";
			}
			else {
				$filetime = $time;
			}
		}
	
		if( $line =~ /<SUMMARY::quants>/ ){
			$lineno++;
			if( $scantwo ){
				while( $file[++$lineno] !~ /5%/ ){}
				@quant = split( / /, $file[$lineno] );
			}else{
				my @tempComma = split(/,/,$file[++$lineno]);
				$quant[0] = $tempComma[6];
			}
		}
	} # for every line

=item checking if file ends properly

=cut

	if( !($file[$#file] =~ /<\/DATA>/ ) && !($file[$#file] =~ /<\/WARNINGS>/ ) &&!($file[$#file]=~ /<\/ENV>/ ) ){
		resetStatusOfComputationForRecalculation($dbh,$filename,$dryrun);
		harmless("\tERROR: wrong ending of file!!!\n\t>>$file[$#file]<<\n",-2);
		return($exitcode);
	}

=item checking if sections are properly closed

=cut

	if( $sectioncount > 0 ){
		resetStatusOfComputationForRecalculation($dbh,$filename,$dryrun);
		harmless("\tERROR: some opened sections have not been closed!!!\n",-2);
		return($exitcode);
	}

=item transformation of covars setting into database-compatible terms

=cut

	if( $covars eq 'none' ){
		$cov_meth = 'none';
		@covars_array = ();
	}
	else {
		my @cov_tmp = split(/,/,$covars);
		for( my $covNo=0; $covNo<=$#cov_tmp; $covNo++ ){
			if (${cov_tmp[$covNo]} =~ m/_add|_int/ ) {
				push @covars_array,${cov_tmp[$covNo]};
			}
			else {	
				push @covars_array,"${cov_tmp[$covNo]}_${cov_meth}";
			}
		}

		if( $cov_meth eq 'add' ){
			$cov_meth = 'additive';
		}
		elsif( $cov_meth eq 'int' ){
			$cov_meth = 'interactive';
		}
		else {
			print STDERR "Unknown cov_math '$cov_meth'.\n";
			exit -1;
		}
	}


=item Preparing database queries for single or interacting effects

=cut
	my $sth_qtl;
	if( $scantwo ){
		$sth_qtl = $sth_qtl_scantwo;
		$sth_delete = $sth_delete_interaction;
	}else{
		$sth_qtl = $sth_qtl_scanone;
		$sth_delete = $sth_delete_qtl;
	}
	$version++;

=item Removing previous database entries of the same computation

=cut

	print "\tDeleting old entries for computation #".$compute_id." from database!\n"
		if $verbose;
	unless ($dryrun) {
		$sth_delete->execute($compute_id); 	
		$sth_delete->finish;
	}

	if( $scantwo ){
		if( $success > 0 ){
			print "\tWriting $success entr".(($success>1)?"ies":"y")." to database!\n";
			#postparse
			for( my $scantwolineno=0; $scantwolineno<=$#file; $scantwolineno++ ){
				my $scantwoline = $file[$scantwolineno];
				
				if( $scantwoline =~ /<SUMMARY::scantwo.S.P>/ ){	#getting qtl informations
					$scantwolineno++; # now directly on header line, of table which is always present
					# header with p-Values (now standard)
					# "pos1f" "pos2f" "lod.full" "pval" "lod.fv1" "pval" "lod.int" "pval" "    pos1a" "pos2a" "lod.add" "pval" "lod.av1" "pval"
					# header without p-Values (previously)
					# .. to be added ..
					my $scantwoheader = $file[$scantwolineno];
					$scantwoheader =~ s/"[ \t]+([a-z])/"$1/g; # correcting for blanks within quotes
					my $hasPvalues = $scantwoheader =~ /"pval"/;

					while( $file[++$scantwolineno] !~ /<\/SUMMARY(::scantwo.S.P)?>/ ){
						$scantwoline = $file[$scantwolineno];

						# remove all quotes
						$scantwoline =~ s/"//g;

						# split by blank, comma or tabs (should be blanks)
						# and by ":" to split chromosome information which may or may not
						# be prepended by a blank
						my ($chr1,$chr2,$cM1,$cM2,@remainder) = split( /[ ,\t:]+/, $scantwoline);
						die print STDERR "\tE: Line \n\t   $scantwoline\n\thas chromosome information 1 '$chr1' with no starting c.\n"
							unless $chr1 =~ /^c/;
						$chr1 =~ s/^c//; # take that "c" away
						die print STDERR "\tE: Line \n\t   $scantwoline\n\thas chromosome information 2 '$chr2' with no starting c.\n"
							unless $chr2 =~ /^c/;
						$chr2 =~ s/^c//; # take that "c" away

						my $loc1 = getLocus( $chr1, $cM1 );
						my $loc2 = getLocus( $chr2, $cM2 );

						print "\tInteraction (get): $loc1 <-> $loc2\n" if $verbose;

						if( !defined( $loc1 ) or $loc1 eq '' ){
							$loc1 = setLocus( $chr1, $cM1 );
						}
						if( !defined( $loc2 ) or $loc2 eq '' ){
							$loc2 = setLocus( $chr2, $cM2 );
						}
						print "\tInteraction (set): $loc1 <-> $loc2\n" if $verbose;

						print STDERR "Now writing scantwo data." if $verbose;
						unless ($dryrun) {
							# Writing scantwo data into table locusInteraction
							if ($hasPvalues) {
								$sth_qtl->execute($compute_id, $trait, $loc1, $loc2,
									$NULL, # type - was add/int, now obsolete
									join(",",@covars_array), # covariates
									# LOD scores
									$remainder[1], $remainder[3], $remainder[5],
									$remainder[9], $remainder[11],
									# Quantiles
									$quant[1], $quant[2], $quant[3], $quant[4], $quant[5],
									# p-Values
									$remainder[2], $remainder[4], $remainder[6],
									$remainder[10], $remainder[12],
								) or die "Could not write to locus interaction to database: ".$sth_qtl."\n";
							}
							else {
								die "FIXME: Need to prepare for ancient data without p-values.\n";
								# FIXME
								die "FIXME: the upload for dumps with no P-Values needs to be adjusted, still.\n";
								$sth_qtl->execute($compute_id, $trait, $loc1, $loc2, $NULL,
									join(",",@covars_array),
									$remainder[1], $remainder[3], $remainder[5],
									$remainder[9], $remainder[11],
									$quant[1], $quant[2], $quant[3], $quant[4], $quant[5],
									$NULL,$NULL,$NULL,$NULL,$NULL # no p-Values determined
								) or die "Could not write to locus interaction to database\n";
							}
							$sth_qtl->finish;
						}
					}
				}
			}
		}
		else{
			$exitcode=3;
		}

		print "Update of status: $status -> done\n";
		unless ($dryrun) {
			$sth_compute->execute($version,$filetime,$compute_id) 
				or print "\t****** Could not update status ********\n";
			$sth_compute->finish;
		}
	
	}
	else {
		if( $success > 0 ){
			print "\tWriting $success entr".(($success>1)?"ies":"y")." to database!\n";
			#postparse
			for( my $scanonelineno=0; $scanonelineno<=$#file; $scanonelineno++ ){
				my $scanoneline = $file[$scanonelineno];
				
				if( $scanoneline =~ /<SUMMARY::scanone.S.P>/ ){	#getting qtl informations
					$scanonelineno++; # skip header line
					while( $file[++$scanonelineno] !~ /<\/SUMMARY(::scanone.S.P)?>/ ){
						$scanoneline = $file[$scanonelineno];
						print STDERR "scanoneline: $scanoneline\n" if $verbose;
						# the table may be comma-separated - most likely not
						my @lineFields = split( /,/, $scanoneline );
						if( $#lineFields < 1 ){ @lineFields = split(/ /, $lineFields[0]); }
						for( my $lineFieldNo=0; $lineFieldNo<=$#lineFields; $lineFieldNo++ ){
							$lineFields[$lineFieldNo] =~ s/\"//g;		#"
						}

						print STDERR "\tWriting single effect into QTL table - scanoneline:$scanoneline" if $verbose;

						unless ($dryrun) {
							$sth_qtl->execute($compute_id,
										$lineFields[0], # Locus/Marker
										$trait,
										$lineFields[3], # LOD score
										$lineFields[4], # p-Value
										$lineFields[1], # Chromosome
										$lineFields[2], # cMorgan
										$quant[0],
										join(",",@covars_array), $phenocol);
							$sth_qtl->finish;

							if( ! exists($committed_loci{$lineFields[0]}) ){
								print STDERR "\tAlso preparing entry for locus - scanoneline:$scanoneline\n" if $verbose;
								my $loc_name = "";
								my $loc_pos;
								if ($dryrun) {
									print "\tTesting if locus exists - scanoneline:$scanoneline\n" if $verbose;
								}
								else {
									if ( ! $sth_loc_select->execute("$lineFields[0]")) {
										harmless($DBI::errstr,-1);
										return($exitcode);
									}		
								}
								while( my @data = $sth_loc_select->fetchrow_array() ){
									$loc_name = $data[0];
									$loc_pos = $data[1];
								}
								$sth_jobexists->finish;
								if($loc_name eq ""){
									$sth_loc->execute($lineFields[0],
											     $lineFields[1], 
												$lineFields[2], $NULL);
									$sth_loc->finish;
								}
								elsif ($loc_name eq $lineFields[0] and $loc_pos ne $lineFields[2]){
									$sth_loc_update->execute("$lineFields[2]","$loc_name")
								}
								$committed_loci{$lineFields[0]}="scanone";
							}
						}
					}
				}
			}
		}
		else{
			$exitcode=3;
		}
		print "\tUpdate of status: '$status' -> 'done'\n" if $verbose;
		unless($dryrun) {
			$sth_compute->execute($version,$filetime,$compute_id)
				or print "\t**** could not execute update status (compute_id=$compute_id)****\n";
		}
	}
	return $exitcode;
}

=back

=cut


1;
