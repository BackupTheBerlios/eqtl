#!/usr/bin/env r

doc<-"

=head1 NAME

effectPlot.R - show quantitative influence of genotype of expression level

=head1 SYNOPSIS

effectPlot.R [options]

or to be sourced from within an R shell

=head1 DESCRIPTION

=head1 OPTIONS

=over 4

=item verbose

=item help

=item trait I<trait_id>

Only a single trait is worked on. If there is demand, this will be extended towards the simultaneous treatment of multiple traits.

=item LODmin minimalLODscore

only loci with a LOD score of at least the value denoted will be included in the analysis (not yet implemented)

=item cisDistMax maximalDistanceFromPeak

only show effect for cis-acting loci (not yet implemented)

=item interactive

rather than dumping an image to a file, specified by '--output', the result can be analysed interactively with the R shell . This is useful only when sourcing the script from within an R shell

=item format <png|jpeg|pdf>

The graphics format to be used. The default is 'png'. To use the typical display of the R shell, use set --interaction.

=item covariates

list of covariates to be included  (not implemented)

=item output

complete path to file to include the resulting image, without any .jpeg etc suffix, please. Multiple images may be created (with highly-scored QTL on multiple chromosomes). It will receive a filename with _Chr_cM suffix.

=item width I<number>

The width of the figure, either in pixels (png, jpeg) or inch (pdf).

=item height I<number>

The width of the figure, defaults to width unless explicitly set.

=back


=head1 AUTHORS

Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>,

=head1 COPYRIGHT

University of LE<uuml>beck, Germany, 2009

=cut

"

##
##  I N T E R N A L   F U N C T I O N S
##

#
# prepare the output file
#
prepareOutput<-function(filename) {
	if (is.null(filename)) {
		stop("prepareOutput has NULL as filename\n")
	}
	if (is.null(opt$interactive)) {
		if (is.null(opt$format) || "png" == opt$format) {
			png(filename,width=width.pixel,height=height.pixel)
		}
		else if ("pdf" == opt$format) {
			pdf(filename,width=width.inch,height=height.inch)
		}
		else if ("jpg" == opt$format  || "jpeg" == opt$format) {
			jpg(filename,width=width.pixel,height=height.pixel)
		}
		else if ("gif" == opt$format) {
			jpg(filename,width=width.pixel,height=height.pixel)
		}
		else {
			cat("Unknown format ",opt$format,"\n")
			q(status=1);
		}
	}
}

library(getopt)
library(qtl)


# cat("I was here 0.\n")

width.pixel<-2*480
width.inch<-11
height.pixel<-width.pixel
height.inch<-width.inch

opt = getopt(matrix(c(
    'verbose'    , 'v', 2, "integer",
    'debug'      , 'd', 2, "integer",
    'help'       , 'h', 0, "logical",
    'trait'      , 't', 1, "character",
    'chromosome1', 'e', 2, "character",
    'chromosome2', 'w', 2, "character",
    'cM1'        , 'm', 2, "double",
    'cM2'        , 'n', 2, "double",
    'method'     , 'y', 2, "character",
    'marker1'    , 'a', 2, "double",
    'marker2'    , 'b', 2, "double",
    'findmarker' , 'z', 2, "character",
    'LODmin'     , 'l', 1, "double",
    'interactive', 'i', 0, "logical",
    'format'     , 'f', 1, "character",
    'covariates' , 'c', 1, "character",
    'output'     , 'o', 1, "character"
   ),ncol=4,byrow=TRUE), debug=TRUE)

if (!is.null(opt$help)) {
   cat("Please run 'pod2man createVenn.R | nroff -man | less' on this script to gain more insights.\n")
   q(status=1);
}

if (is.null(opt$trait)) {
   cat("Please place trait  with the --trait option.\n")
   q(status=1);
}

#if (is.null(opt[["marker1"]])) {
#	if (is.null(opt$chromosome1) & is.null(opt$cM1)) {
#	   cat("Neither marker nor chr/cM pair specified.\n")
#	   q(status=1);
#	}
#}

if (is.null(opt$LODmin)) {
	opt[["LODmin"]] <- 3.5
	if (!is.null(opt$verbose)) cat("Setting default LODmin to ",opt$LODmin,"\n");
}

#if (is.null(opt$cisDistMax)) {
#	opt[["cisDistMax"]] <- 20*1000*1000
#	if (!is.null(opt$verbose)) cat("Setting default cisDistMax to ",opt$cisDistMax,"\n");
#}

if (is.null(opt$format)) {
   opt[["format"]]<-"png";
   cat("Set format to default value '",opt$format,"'.\n",sep="")
}

if ("pdf" == opt$format) {
	if (!is.null(opt$width)) {
		width.inch<-opt$width
	}
	if (!is.null(opt$height)) {
		height.inches<-opt$height
	}
	else {
		height.inch<-width.inch
	}
} else {
	if (!is.null(opt$width)) {
		width.pixel<-opt$width
	}
	if (!is.null(opt$height)) {
		height.pixel<-opt$height
	}
	else {
		height.pixel<-width.pixel
	}
}

#
# Read data - just the default one as a start
#

fname.input<-paste(
	"http://grid64inb.inb.uni-luebeck.de:80/~moeller/stockholm/prepareRqtlInputData.pl?probesetid=",
	opt$trait,
	"&applyLog2=TRUE&score=",sep="")

my.cross <- NULL
my.cross <- read.cross(	format="csv", dir="",
                       	file=fname.input,
		        genotypes=RQTLREADCROSSGENOTYPES,
			alleles=RQTLREADCROSSALLELES ,
			na.strings=RQTLREADCROSSNASTRINGS, convertXdata=TRUE )

if (!is.null(opt$findmarker)) {
	if ("pseudomarker" == opt$findmarker) {
		if (!is.null(opt$verbose)) cat("I: pseudomarker requested, running sim.geno\n")
		my.cross <- sim.geno(my.cross, step=STEPSSO, n.draws=DRAWS)
	}
}

if (is.null(my.cross)) {
	cat("Could no read data for trait '",trait,"'.\n")
	q("no")
}

fm<-function(marker,chr,cM) {
	cat("fm:start\n")
	mname<-NULL
	if (is.null(marker)) {
		# Find marker closest to the Chr and cMorgan specified
		if (!is.null(opt$debug)) {
			cat("ep:find.marker")
		}

		if (is.null(chr)) return(NULL)
		if (is.null(cM)) return(NULL)

		if (is.null(opt$findmarker)) {
			mname <- find.marker(my.cross,chr,cM)
		} else if ("marker" == opt$findmarker) {
			mname <- find.marker(my.cross,chr,cM)
		} else if ("pseudomarker" == opt$findmarker) {
			mname <- find.pseudomarker(my.cross,chr,cM)
		} else {
			stop(paste("Unknown cM -> marker mapping: '",opt$findmarker,"'\n"))
		}


		if (!is.null(opt$verbose)) {
			cat("Investigating marker '",mname,
			    " as determined from coordinates ",chr,"@",cM,".\n")
		}
	} else {
		# Use marker as specified
		mname <- marker1
		if (!is.null(opt$verbose)) cat("Investigating marker '",mname," as specified\n")
	}
	cat("fm:end\n")
	return(mname)
}

ep<-function(marker1,chr1,cM1,marker2,chr2,cM2) {
	cat("ep:start\n")
	mname1<-NULL
	mname1<-fm(marker1,chr1,cM1)

	if (is.null(mname1)) {
		cat("ep: Could not determine 1st marker.\n")
		q(status=1);
	}

	mname2<-NULL
	mname2<-fm(marker2,chr2,cM2)
	#	Effect Plots
	r<-NULL
	if (is.null(mname2)) {
		if (opt$verbose) cat("ep: Could not determine 2nd marker.\n")
		#f<-paste(opt$output,"_mn1_",mname1,"_trait",".",opt$format,sep="")
		f<-paste(opt$output,".",opt$format,sep="")
		cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
		prepareOutput(f)
		if (!is.null(opt$debug)) cat("ep:invocation of effectplot\n")
		main<-paste("Effect of",mname1,"on expression of",opt$trait)
		r<-effectplot(my.cross,mname1=mname1,main=main)
	} else {
		#f<-paste(opt$output,"_mn1_",mname1,"_mn2_",mname2,"_trait",".",opt$format,sep="")
		f<-paste(opt$output,".",opt$format,sep="")
		cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
		prepareOutput(f)
		if (!is.null(opt$debug)) cat("ep:invocation of effectplot\n")
		main<-paste("Effect of",mname1,"and",mname2,"on expression of",opt$trait)
		r<-effectplot(my.cross,mname1=mname1,mname2=mname2,main=main)
	}


	if(is.null(opt$interactive)) {
		dev.off()
	}
	if (!is.null(opt$debug)) cat("ep:end\n")
	return(r)
}

m<-opt[["marker1"]]
chr<-opt[["chromosome1"]]
cM<-opt[["cM1"]]
m2<-opt[["marker2"]]
chr2<-opt[["chromosome2"]]
cM2<-opt[["cM2"]]

if (is.null(m) & (is.null(cM) | is.null(chr))) {
	txtname<-paste(opt$output,".txt",sep="")

	my.cross <- calc.genoprob( my.cross, step=1, error.prob=0.01 )

	# scanone

	my.scanone.S <- scanone( my.cross, pheno.col=3, method="RQTL_METHOD", verbose=FALSE )
	m<-as.matrix(summary(my.scanone.S,thr=opt$LODmin)) # LODmin is always set
	cat(file=txtname,"<h2>Scanone</h2>\n")
	cat(file=txtname,paste("<table><tr><th>",paste(colnames(m),collapse="</th><th>",sep=""),
		"<th>Links</th>",
		"</th></tr>\n"),append=T)
	apply(m,1,function(X){
		cat(file=txtname,paste("<tr><td>",paste(X,collapse="</td><td>",sep=""),"</td>",sep=""),append=T)
		cat(file=txtname,paste("<td>",
			"<a href='effectplot.php?chromosome=",X["chr"],"&cM=",X["pos"],
			"&traitlist=",opt$trait,
			# "&direct=1",
			"&unit=cM",
			"'>effectplot</a>",
			"</td>",sep=""),
			append=T
		)
		cat(file=txtname,"</tr>\n",append=T)
		
	})
	cat(file=txtname,paste("</table>\n"),append=T)

	if (F) {
	# scantwo

	my.scanone.T <- scantwo( my.cross, pheno.col=3, method="hk", verbose=FALSE )
	m<-as.matrix(summary(my.scanone.T,thr=opt$LODmin)) # LODmin is always set
	cat(file=txtname,"<h2>Scantwo</h2>\n")
	cat(file=txtname,paste("<table><tr><th>",paste(colnames(m),collapse="</th><th>",sep=""),
		"</th></tr>\n"),append=T)
	apply(m,1,function(X){
		cat(file=txtname,paste("<tr><td>",paste(X,collapse="</td><td>",sep=""),"</td>",sep=""),append=T)
		if (F) cat(file=txtname,paste("<td>",
			"<a href='effectplot.php?chromosome=",X["chr"],"&cM=",X["pos"],
			"&traitlist=",opt$trait,
			# "&direct=1",
			"'>effectplot</a>",
			"</td>",sep=""),
			append=T
		)
		cat(file=txtname,"</tr>\n",append=T)
		
	})
	cat(file=txtname,paste("</table>\n"),append=T)
	}

	f<-paste(opt$output,".",opt$format,sep="")
	cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
	#par(mfrow=c(2,1))
	prepareOutput(f)

	plot(my.scanone.S)
	#plot(my.scanone.T)
	dev.off()
	par(mfrow=c(1,1))

} else {
	if (is.null(cM)|is.null(chr)) {
		stop("Please specify both cM ('",cM,"') and chr ('",chr,"').\n",sep="")
	}

	if (is.null(m2) & xor(is.null(cM2),is.null(chr2))) {
		stop("If specifying a second locus then specify both cM ('",cM2,"') and chr ('",chr2,"').\n",sep="")
	}
	r<-ep(m,chr,cM,m2,chr2,cM2)
	print(r)
}
