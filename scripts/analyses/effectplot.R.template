#!/usr/bin/env r

doc<-"

=head1 NAME

effectPlot.R - show quantitative influence of genotype of expression level

=head1 SYNOPSIS

effectPlot.R [options]

or to be sourced from within an R shell

=head1 DESCRIPTION

=head1 OPTIONS

=over 4

=item verbose

=item help

=item trait I<trait_id>

Only a single trait is worked on. If there is demand, this will be extended towards the simultaneous treatment of multiple traits.

=item LODmin minimalLODscore

only loci with a LOD score of at least the value denoted will be included in the analysis (not yet implemented)

=item cisDistMax maximalDistanceFromPeak

only show effect for cis-acting loci (not yet implemented)

=item interactive

rather than dumping an image to a file, specified by '--output', the result can be analysed interactively with the R shell . This is useful only when sourcing the script from within an R shell

=item format <png|jpeg|pdf>

The graphics format to be used. The default is 'png'. To use the typical display of the R shell, use set --interaction.

=item covariates

list of covariates to be included  (not implemented)

=item output

complete path to file to include the resulting image, without any .jpeg etc suffix, please. Multiple images may be created (with highly-scored QTL on multiple chromosomes). It will receive a filename with _Chr_cM suffix.

=item width I<number>

The width of the figure, either in pixels (png, jpeg) or inch (pdf).

=item height I<number>

The width of the figure, defaults to width unless explicitly set.

=back

"

##
##  I N T E R N A L   F U N C T I O N S
##

#
# prepare the output file
#
prepareOutput<-function(filename) {
	if (is.null(filename)) {
		stop("prepareOutput has NULL as filename\n")
	}
	if (is.null(opt$interactive)) {
		if (is.null(opt$format) || "png" == opt$format) {
			png(filename,width=width.pixel,height=height.pixel)
		}
		else if ("pdf" == opt$format) {
			pdf(filename,width=width.inch,height=height.inch)
		}
		else if ("jpg" == opt$format  || "jpeg" == opt$format) {
			jpg(filename,width=width.pixel,height=height.pixel)
		}
		else if ("gif" == opt$format) {
			jpg(filename,width=width.pixel,height=height.pixel)
		}
		else {
			cat("Unknown format ",opt$format,"\n")
			q(status=1);
		}
	}
}

library(RMySQL)
library(getopt)
library(qtl)


# cat("I was here 0.\n")

width.pixel<-2*480
width.inch<-11
height.pixel<-width.pixel
height.inch<-width.inch

opt = getopt(matrix(c(
    'verbose'    , 'v', 2, "integer","",
    'debug'      , 'd', 2, "integer","",
    'help'       , 'h', 0, "logical","",
    'trait'      , 't', 1, "character","",
    'chromosome1', 'e', 2, "character","",
    'chromosome2', 'q', 2, "character","",
    'cM1'        , 'm', 2, "double","",
    'cM2'        , 'n', 2, "double","",
    'method'     , 'y', 2, "character","",
    'marker1'    , 'a', 2, "double","",
    'marker2'    , 'b', 2, "double","",
    'findmarker' , 'z', 2, "character","",
    'LODmin'     , 'l', 1, "double","minimal LOD score for QTLs to list in table",
    'interactive', 'i', 0, "logical","",
    'individuals', 'I', 0, "character","",
    'format'     , 'f', 1, "character","",
    'covariates' , 'c', 1, "character","",
    'work'       , 'w', 1, "character","set to 'scanone' or 'scantwo'",
    'output'     , 'o', 1, "character","",
    'main'       , 'M', 1, "character","main title of the plot",
    'sub'        , 'S', 1, "character","sub title of the plot"
   ),ncol=5,byrow=TRUE), debug=FALSE)

if (!is.null(opt$help)) {
   cat("Please run 'pod2man createVenn.R | nroff -man | less' on this script to gain more insights.\n")
   q(status=1);
}

if (is.null(opt$trait)) {
   cat("Please place trait  with the --trait option.\n")
   q(status=1);
}

if (is.null(opt$work)) {
   opt$work<-"scanone"
}


if (is.null(opt$main)) {
   opt[["main"]]<-opt[["trait"]]
   if (!is.null(opt[["covariates"]])) {
	opt[["main"]]<-paste(opt[["trait"]]," with covariates ",opt[["covariates"]],sep="")
   }
   if (!is.null(opt$verbose)) cat("Set main title to ",opt$main,"\n")
}

if (is.null(opt$sub)) {
#   opt[["sub"]]<-paste("Showing ",switch(opt$display,lod="LOD",opt$display),
#                       " of eQTL with LOD>=",opt$LODmin,
#                       if (opt$PvalueMax<1) paste(" and P-value<=",opt$PvalueMax,sep="") else "",
#                       if (opt$MeanMin>-1) paste(" and mean expression>=",opt$MeanMin,sep="") else "",
#                       sep="")
#   if (!is.null(opt$verbose)) cat("Set sub title to ",opt$sub,"\n")
}


#if (is.null(opt[["marker1"]])) {
#	if (is.null(opt$chromosome1) & is.null(opt$cM1)) {
#	   cat("Neither marker nor chr/cM pair specified.\n")
#	   q(status=1);
#	}
#}

if (is.null(opt$LODmin)) {
	opt[["LODmin"]] <- 3.5
	if (!is.null(opt$verbose)) cat("Setting default LODmin to ",opt$LODmin,"\n");
}

#if (is.null(opt$cisDistMax)) {
#	opt[["cisDistMax"]] <- 20*1000*1000
#	if (!is.null(opt$verbose)) cat("Setting default cisDistMax to ",opt$cisDistMax,"\n");
#}

if (is.null(opt$format)) {
   opt[["format"]]<-"png";
   cat("Set format to default value '",opt$format,"'.\n",sep="")
}

if (is.null(opt$method)) {
	opt$method<-"RQTL_METHOD"
}

if ("pdf" == opt$format) {
	if (!is.null(opt$width)) {
		width.inch<-opt$width
	}
	if (!is.null(opt$height)) {
		height.inches<-opt$height
	}
	else {
		height.inch<-width.inch
	}
} else {
	if (!is.null(opt$width)) {
		width.pixel<-opt$width
	}
	if (!is.null(opt$height)) {
		height.pixel<-opt$height
	}
	else {
		height.pixel<-width.pixel
	}
}

#
# Read data - just the default one as a start
#

fname.input<-paste(
	"URLGETDATA",
	"?probesetid=",
	opt$trait,
	"&applyLog2=APPLYLOG2&score=",sep="")


if (!is.null(opt$verbose)) {
	cat("fname.input",":",fname.input,"\n");
}

my.cross <- NULL
my.cross <- read.cross(	format="csv", dir="",
                       	file=fname.input,
		        genotypes=RQTLREADCROSSGENOTYPES,
			alleles=RQTLREADCROSSALLELES ,
			na.strings=RQTLREADCROSSNASTRINGS, convertXdata=CONVERTXDATA, comment.char="#" )

# Retrieval of details for specification of subset of individuals
if(!is.null(opt$individuals)){
	con <- dbConnect(MySQL(),host="DATABASEHOSTLOCAL",db="DATABASEEQTLNAME",user="DATABASEEQTLUSER")
	q <- paste("SELECT name,phen,relation,value FROM individuals_group WHERE individuals_group_id=",opt$individuals,";",sep="")
	cat("q: "); print(q)
	q.result<-dbGetQuery(con,q)
	if (opt$verbose) cat("q.result: "); print(q.result)
	if (opt$verbose) cat("dim(q.result): "); print(dim(q.result))
	if (opt$verbose) cat("colnames(q.result): "); print(colnames(q.result))
	phen<-q.result[1,2]
	relation<-q.result[1,3];
	value<-q.result[1,4]
	dbDisconnect(con)
	if ("="==relation) relation="==";
	if (opt$verbose) cat("phen:",phen," relation:",relation," value:",value,"\n")
	my.subset.pheno <- pull.pheno(my.cross,phen)
	if (is.null(my.subset.pheno) | 0 == length(my.subset.pheno)) {
		stop(paste("Could not retrieve information on phenotype '",phen,
				"' The following are available: ",paste(colnames(my.cross$pheno),collapse=",", sep=""),
				".\n",sep=""))
	}
	e<-paste("my.subset.pheno",relation,value); cat("Expression: "); print(e)
	e.ind<-eval(parse(text=e))
	if (opt$verbose) cat("e.ind: "); print(e.ind)
	my.cross <- subset(my.cross, ind = e.ind)
} else { 
	cat("Analysis is running on all individuals as no subset defined.\n")
}
#-----------------------code ends for subset------------------------------*

if (USEJITTERMAP) {
	if (!is.null(opt$verbose)) {
		cat("Executing jittermap.\n")
	}
	my.cross<-jittermap(my.cross)
} else  if (!is.null(opt$verbose)) {
	cat("*Not* executing jittermap.\n")
}

if (is.null(my.cross)) {
	cat("Could no read data for trait '",trait,"'.\n")
	q("no")
}

fm<-function(marker,chr,cM) {
	cat("fm:start\n")
	mname<-NULL
	if (is.null(marker)) {
		# Find marker closest to the Chr and cMorgan specified
		if (!is.null(opt$debug)) {
			cat("ep:find.marker")
		}

		if (is.null(chr)) return(NULL)
		if (is.null(cM)) return(NULL)

		if (is.null(opt$findmarker)) {
			mname <- find.marker(my.cross,chr,cM)
		} else if ("marker" == opt$findmarker) {
			mname <- find.marker(my.cross,chr,cM)
		} else if ("pseudomarker" == opt$findmarker) {
			mname <- find.pseudomarker(my.cross,chr,cM)
		} else {
			stop(paste("Unknown cM -> marker mapping: '",opt$findmarker,"'\n"))
		}


		if (!is.null(opt$verbose)) {
			cat("Investigating marker '",mname,
			    " as determined from coordinates ",chr,"@",cM,".\n")
		}
	} else {
		# Use marker as specified
		mname <- marker1
		if (!is.null(opt$verbose)) cat("Investigating marker '",mname," as specified\n")
	}
	cat("fm:end\n")
	return(mname)
}

ep<-function(marker1,chr1,cM1,marker2,chr2,cM2) {
	cat("ep:start\n")
	mname1<-NULL
	mname1<-fm(marker1,chr1,cM1)

	if (is.null(mname1)) {
		cat("ep: Could not determine 1st marker.\n")
		q(status=1);
	}

	mname2<-NULL
	mname2<-fm(marker2,chr2,cM2)
	#	Effect Plots
	r<-NULL
	if (is.null(mname2)) {
		if (!is.null(opt$verbose)) cat("ep: Could not determine 2nd marker.\n")
		#f<-paste(opt$output,"_mn1_",mname1,"_trait",".",opt$format,sep="")
		f<-paste(opt$output,".",opt$format,sep="")
		cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
		prepareOutput(f)
		if (!is.null(opt$debug)) cat("ep:invocation of effectplot\n")
		main<-paste("Effect of",mname1,"on expression of",opt$trait)
		r<-effectplot(my.cross,pheno.col=PHENOCOL,mname1=mname1,main=main)
	} else {
		#f<-paste(opt$output,"_mn1_",mname1,"_mn2_",mname2,"_trait",".",opt$format,sep="")
		f<-paste(opt$output,".",opt$format,sep="")
		cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
		prepareOutput(f)
		if (!is.null(opt$debug)) cat("ep:invocation of effectplot\n")
		main<-paste("Effect of",mname1,"and",mname2,"on expression of",opt$trait)
		r<-effectplot(my.cross,pheno.col=PHENOCOL,mname1=mname1,mname2=mname2,main=main)
	}


	if(is.null(opt$interactive)) {
		dev.off()
	}
	if (!is.null(opt$debug)) cat("ep:end\n")
	return(r)
}

if (!is.null(opt$verbose)) {
	cat("Learned all functions.\n");
}

m<-opt[["marker1"]]
chr<-opt[["chromosome1"]]
cM<-opt[["cM1"]]
m2<-opt[["marker2"]]
chr2<-opt[["chromosome2"]]
cM2<-opt[["cM2"]]

if (is.null(m) & (is.null(cM) | is.null(chr))) {
	txtname<-paste(opt$output,".txt",sep="")

	effectplotlinkO<-function(file,chr,pos,name,verbose){
		cat(file=txtname,paste(
			"<a href='effectplot.php?chromosome=",chr,"&cM=",pos,
			"&traitlist=",opt$trait,
			"&direct=1",
			"&inlineImages=1",
			"&unit=cM",
			if (verbose) "&verbose=1" else "",
			"'>",name,"</a>",
			sep=""),
			append=T
		)
	}
	effectplotlinkT<-function(file,chr1,pos1,chr2,pos2,name,verbose){
		cat(file=txtname,paste(
			"<a href='effectplot.php?","chromosome=",chr1,"&cM=",pos1,
			                      "&","chromosome2=",chr2,"&cM2=",pos2,
			"&traitlist=",opt$trait,
			"&direct=1",
			"&inlineImages=1",
			"&unit=cM",
			if (verbose) "&verbose=1" else "",
			"'>",name,"</a>",
			sep=""),
			append=T
		)
	}

	my.work<-NULL

	#
	# getting the covariates worked out
	#

	if (!is.null(opt$debug)) {
		cat("cov: "); print(cov)
	}

	cov.add<-NULL
	cov.int<-NULL
	if (!is.null(opt[["covariates"]])) {
		cov.array <- strsplit(split="\\s*,\\s*",x=opt[["covariates"]])[[1]]
		for(cc in cov.array) {
			cc.split<-strsplit(split="_",x=cc)[[1]]
			if (2 != length(cc.split)) {
				warning(paste("Found strangely formatted covariate (1): ",cc,"\n",sep=""))
				continue;
			}
			if (cc.split[2] == "add") {
				cov.add <- c(cov.add,cc.split[1])
			} else if (cc.split[2] == "int") {
				cov.int <- c(cov.int,cc.split[1])
			} else {
				warning(paste("Found strangely formatted covariate (2): ",cc,"\n",sep=""))
				continue;
			}
		}
	}
	# what is int shall also be add
	cov.int<-unique(cov.int)
	cov.add<-unique(c(cov.add,cov.int))

	ac<-NULL; ic<-NULL
	if (!is.null(cov.add)) ac <- pull.pheno(my.cross, cov.add)
	if (!is.null(cov.int)) ic <- pull.pheno(my.cross, cov.int)

	if (!is.null(opt$verbose)) {
		cat("Parameters for scanone:\n");
		cat("   cov.add: "); print(cov.add)
		cat("   cov.int: "); print(cov.int)
	}

	#
	# here starting the real computation
	#

	if ("scanone" == opt$work) {
		if (USECALCGENOPROB) {
			if (!is.null(opt$verbose)) {
				cat("Executing Calc.genoprob.\n");
			}
			my.cross <- calc.genoprob( my.cross, step=STEPSSO, error.prob=0.01 )
		}

		if (!is.null(opt$verbose)) {
			cat("Executing Scanone.\n");
		}

		my.work <- scanone( my.cross, pheno.col=PHENOCOL, method=opt$method,
                                    verbose=FALSE, addcovar=ac, intcovar=ic)
		m<-as.matrix(summary(my.work,thr=opt$LODmin)) # LODmin is always set
		cat(file=txtname,"<h2>Scanone</h2>\n")
		cat(file=txtname,
                    paste("<table><tr><th>",paste(colnames(m),collapse="</th><th>",sep=""),
			  "<th>Links</th>",
			  "</th></tr>\n"),append=T)
		apply(m,1,function(X){
			cat(file=txtname,paste("<tr><td>",paste(X,collapse="</td><td>",sep=""),"</td>",sep=""),append=T)
			cat(file=txtname,"<td>",append=T)
			effectplotlinkO(txtname,X["chr"],X["pos"],"effectplot",verbose=!is.null(opt$verbose))
			cat(file=txtname,"</td>",append=T)
			cat(file=txtname,"</tr>\n",append=T)
			
		})
		cat(file=txtname,paste("</table>\n"),append=T)
	} else if ("scantwo" == opt$work) {

		if (USECALCGENOPROB) {
			if (!is.null(opt$verbose)) {
				cat("Executing calc.genoprob.\n");
			}
			my.cross <- calc.genoprob( my.cross, step=STEPSST, error.prob=0.01 )
		}

		if (!is.null(opt$verbose)) {
			cat("Executing Scantwo.\n");
		}

		my.work <- scantwo( my.cross, pheno.col=PHENOCOL, method=opt$method,
                                    verbose=FALSE, addcovar=ac, intcovar=ic)
		m<-as.matrix(summary(my.work,thr=opt$LODmin)) # LODmin is always set
		cat(file=txtname,"<h2>MQMscan</h2>\n")
		cat(file=txtname,
                    paste("<table><tr><th>",paste(colnames(m),collapse="</th><th>",sep=""),
			  "<th>Links</th>",
			  "</th></tr>\n"),append=T)
		apply(m,1,function(X){
			cat(file=txtname,paste("<tr><td>",paste(X,collapse="</td><td>",sep=""),"</td>",sep=""),append=T)
			cat(file=txtname,"<td>",append=T)
			effectplotlinkO(txtname,X["chr"],X["pos"],"effectplot",verbose=!is.null(opt$verbose))
			cat(file=txtname,"</td>",append=T)
			cat(file=txtname,"</tr>\n",append=T)
			
		})
		cat(file=txtname,paste("</table>\n"),append=T)
		cat(file=txtname,"<h2>Scantwo</h2>\n")
		cat(file=txtname,paste("<table><tr><th>",paste(colnames(m),collapse="</th><th>",sep=""),
			"<th>Effectplot</th>",
			"</th></tr>\n"),append=T)
		apply(m,1,function(X){
			cat(file=txtname,paste("<tr><td>",paste(X,collapse="</td><td>",sep=""),"</td>",sep=""),append=T)
			cat(file=txtname,"<td>",append=T)
			effectplotlinkT(file=txtname,chr1=X["chr1"],pos1=X["pos1f"],
			                             chr2=X["chr2"],pos2=X["pos2f"],name="full",
					verbose=!is.null(opt$verbose))
			cat(file=txtname," &nbsp; ",append=T)
			effectplotlinkT(file=txtname,chr1=X["chr1"],pos1=X["pos1a"],
			                             chr2=X["chr2"],pos2=X["pos2a"],name="additive",
					verbose=!is.null(opt$verbose))
			cat(file=txtname,"</td>",append=T)
			cat(file=txtname,"</tr>\n",append=T)
			
		})
		cat(file=txtname,paste("</table>\n"),append=T)
	} else if ("mqmscan" == opt$work) {
		if (USECALCGENOPROB) {
			if (!is.null(opt$verbose)) {
				cat("Executing Calc.genoprob.\n");
			}
			my.cross <- calc.genoprob( my.cross, step=STEPSSO, error.prob=0.01 )
		}

		cat("Augmenting data to estimate missing.\n")
		my.cross <- mqmaugment(my.cross)

		if (!is.null(opt$verbose)) {
			cat("Executing mqmscan.\n");
		}
		covs.unique<-unique(c(cov.int,cov.add))
		my.work <- mqmscan( my.cross, pheno.col=PHENOCOL,
				    #cofactors=cov.unique,
                                    verbose=FALSE)
		m<-as.matrix(summary(my.work,thr=c(opt$LODmin,0,0,0,0))) # LODmin is always set
		cat(file=txtname,"<h2>MQMscan</h2>\n")
		cat(file=txtname,paste("<table><tr><th>",paste(colnames(m),collapse="</th><th>",sep=""),
			"<th>Effectplot</th>",
			"</th></tr>\n"),append=T)
		apply(m,1,function(X){
			cat(file=txtname,paste("<tr><td>",paste(X,collapse="</td><td>",sep=""),"</td>",sep=""),append=T)
			cat(file=txtname,"<td>",append=T)
			effectplotlinkT(file=txtname,chr1=X["chr1"],pos1=X["pos1f"],
			                             chr2=X["chr2"],pos2=X["pos2f"],name="full",
					verbose=!is.null(opt$verbose))
			cat(file=txtname," &nbsp; ",append=T)
			effectplotlinkT(file=txtname,chr1=X["chr1"],pos1=X["pos1a"],
			                             chr2=X["chr2"],pos2=X["pos2a"],name="additive",
					verbose=!is.null(opt$verbose))
			cat(file=txtname,"</td>",append=T)
			cat(file=txtname,"</tr>\n",append=T)
			
		})
		cat(file=txtname,paste("</table>\n"),append=T)

	} else {
		stop(paste("Don't know how to do '",opt$work,"'.\n",sep=""))
	}

	f<-paste(opt$output,".",opt$format,sep="")
	cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
	prepareOutput(f)
	if ("mqmscan" == opt$work) {
		mqmplot.singletrait(my.work,main=opt$main,sub=opt$sub)
	} else {
		plot(my.work,main=opt$main,sub=opt$sub)
	}
	dev.off()
	par(mfrow=c(1,1))

} else {

	if (!is.null(opt$findmarker)) {
		if ("pseudomarker" == opt$findmarker) {
			if (!is.null(opt$verbose)) cat("I: pseudomarker requested, running sim.geno\n")
			if (!is.null(opt$verbose)) {
				cat("Executing sim.geno.\n");
			}
			my.cross <- sim.geno(my.cross, step=STEPSSO, n.draws=DRAWS)
		}
	}

	if (is.null(cM)|is.null(chr)) {
		stop("Please specify both cM ('",cM,"') and chr ('",chr,"').\n",sep="")
	}

	if (is.null(m2) & xor(is.null(cM2),is.null(chr2))) {
		stop("If specifying a second locus then specify both cM ('",cM2,"') and chr ('",chr2,"').\n",sep="")
	}
	r<-ep(m,chr,cM,m2,chr2,cM2)
	print(r)
}

doc <- "

=head1 AUTHORS

Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>,

=head1 COPYRIGHT

University of LE<uuml>beck, Germany, 2009-2011

=cut

"

