#!/usr/bin/env r

doc<-"

=head1 NAME

createVenn.R - prepare Venn diagrams for traits shared between covariates

=head1 SYNOPSIS

createVenn.R [options]

or to be sourced from within an R shell

=head1 DESCRIPTION

=head1 OPTIONS

=over 4

=item verbose

=item help

=item MeanMin minimalExpressionLevel

only traits with an expression level higher or equal to the value denoted will be included in the analysis

=item LODmin minimalLODscore

only traits with a LOD score of at least the value denoted will be included in the analysis

=item cisDistMax maximalDistanceFromPeak

for being accepted as 'cis', the distance of the peak from the location of the gene must be with in that denoted region, defaulting to 2*10^7 .

=item interactive

rather than dumping an image to a file, specified by '--output', the result can be analysed interactively with the R shell . This is useful only when sourcing the script from within an R shell

=item format <png|jpeg|pdf>

The graphics format to be used. The default is 'png'. To use the typical display of the R shell, use set --interaction.

=item covariates

list of covariates to be included 

=item output

complete path to file to include the resulting image, without any .jpeg etc suffix, please. There are multiple files to be created, each will receive its distinguished filename suffix:

=over 8

=item _exact__trait_all

overlap of loci-traits pairs between covariates

=item _flanking_trait_all

loci are weakened for their flanking markers

=item _trait_all

only traits are inspected, the loci are ignored

=item as before with s/all/cis/

only the cis-acting loci are selected

=item as before with s/all/indiseaseqtl/

only the loci within a classical QTL are inspected

=item width I<number>

The width of the figure, either in pixels (png, jpeg) or inch (pdf).

=item height I<number>

The width of the figure, defaults to width unless explicitly set.

=back

=back


=head1 AUTHORS

Ann-Kristin Grimm <grimm@inb.uni-luebeck.de>,
Steffen Moeller <moeller@inb.uni-luebeck.de>,

=head1 COPYRIGHT

University of LE<uuml>beck, Germany, 2009

=cut

"

library(RMySQL)
library(getopt)

library(gplots) # for Venn diagrams

# cat("I was here 0.\n")

width.pixel<-2*480
width.inch<-11
height.pixel<-width.pixel
height.inch<-width.inch

opt = getopt(matrix(c(
    'verbose'    , 'v', 2, "integer",
    'debug'    , 'd', 2, "integer",
    'help'       , 'h', 0, "logical",
    'MeanMin'    , 'm', 1, "double",
    'LODmin'     , 'l', 1, "double",
    'cisDistMax' , 's', 1, "integer",
    'dis'        , 'a', 0, "logical",
    'interactive', 'i', 0, "logical",
    'format'     , 'f', 1, "character",
    'covariates' , 'c', 1, "character",
    'output'     , 'o', 1, "character"
   ),ncol=4,byrow=TRUE), debug=TRUE)

if (!is.null(opt$help)) {
   cat("Please run 'pod2man createVenn.R | nroff -man | less' on this script to gain more insights.\n");
   q(status=1);
}

if (is.null(opt$LODmin)) {
	opt[["LODmin"]] <- 3.5
	if (!is.null(opt$verbose)) cat("Setting default LODmin to ",opt$LODmin,"\n");
}

if (is.null(opt$cisDistMax)) {
	opt[["cisDistMax"]] <- 20*1000*1000
	if (!is.null(opt$verbose)) cat("Setting default cisDistMax to ",opt$cisDistMax,"\n");
}

if (is.null(opt$format)) {
   opt[["format"]]<-"png";
   cat("Set format to default value '",opt$format,"'.\n")
}

if ("pdf" == opt$format) {
	if (!is.null(opt$width)) {
		width.inch<-opt$width
	}
	if (!is.null(opt$height)) {
		height.inches<-opt$height
	}
	else {
		height.inch<-width.inch
	}
} else {
	if (!is.null(opt$width)) {
		width.pixel<-opt$width
	}
	if (!is.null(opt$height)) {
		height.pixel<-opt$height
	}
	else {
		height.pixel<-width.pixel
	}
}

# for manual interaction in shell: 
# con <- dbConnect(MySQL(),user="qtl", password="", dbname="eQTL_Stockholm", host="pc15.inb.uni-luebeck.de")

con <- dbConnect(MySQL(),user="DATABASEEQTLUSER", password="", dbname="DATABASEEQTLNAME", host="DATABASEHOSTLOCAL")

#covariates<-c('','eae_add','sud_add','dud_add','wl0_add','D12G1_add','D12G2B_add','D12G2C_add','D35G1_add','D35G2B_add','D35G2C_add','t12p_add','t35p_add')
covariates<-c()
if (is.null(opt$covariates)) {
	cat("Falling back to default covariates.\n")
	covariates<-c('eae_int','sud_add','dud_add','wl0_add','D12G1_add')
} else if (5<length(covariates)) {
	q(status=1);
} else {
	covariates <- strsplit(x=opt$covariates,split=";",fixed=TRUE)[[1]]
}

cat(paste("Working with the following covariates: ",paste(covariates, collapse="; "),"\n",sep=""))

query<-paste( "SELECT Locus, Trait, covariates, qtl.chromosome, cis, cis_dist,cMorgan_Peak ",
          "  FROM qtl JOIN trait ON trait_id=Trait JOIN locus ON locus.Name=qtl.Locus ",
	  " WHERE covariates in ('", paste(covariates,collapse="','",sep=""), "')", sep=""
	)

if (!is.null(opt[["PvalueMin"]])) { query<-paste(query," AND pvalue >= ",opt$PvalueMin,sep="")
}
if (!is.null(opt[["PvalueMax"]])) { query<-paste(query," AND pvalue <= ",opt$PvalueMax,sep="")
}
if (!is.null(opt[["LODmin"]]))    { query<-paste(query," AND LOD >= ",opt$LODmin,sep="")
}
if (!is.null(opt[["LODmax"]]))    { query<-paste(query," AND LOD <= ",opt$LODmax,sep="")
}
if (!is.null(opt[["MeanMin"]]))   { query<-paste(query," AND mean >= ",opt$MeanMin,sep="")
}
if (!is.null(opt[["MeanMax"]]))   { query<-paste(query," AND mean <= ",opt$MeanMax,sep="")
}
if (!is.null(opt[["SdMin"]]))     { query<-paste(query," AND sd >= ",opt$SdMin,sep="")
}
if (!is.null(opt[["SdMax"]]))     { query<-paste(query," AND sd <= ",opt$SdMax,sep="")
}
if (!is.null(opt[["MedianMin"]]))   { query<-paste(query," AND median >= ",opt$MedianMin,sep="")
}
if (!is.null(opt[["MedianMax"]]))   { query<-paste(query," AND median <= ",opt$MedianMax,sep="")
}
if (!is.null(opt[["VarianceMin"]])) { query<-paste(query," AND variance >= ",opt$VarianceMin,sep="")
}
if (!is.null(opt[["VarianceMax"]])) { query<-paste(query," AND variance <= ",opt$VarianceMax,sep="")
}
if (!is.null(opt[["cis"]]))       { query<-paste(query," AND 1 = cis AND cis_dist <= ",opt$cisDistMax,sep="")
}
if (!is.null(opt[["debug"]]))     { query<-paste(query," LIMIT 100",sep="")
}
cat("Query: ",query,"\n")

rs<-dbGetQuery(con,query)
if (!is.null(opt$debug)) {
	print(rs)
}

if (0 == nrow(rs)) {
	stop("Have not received a single line from database. The query was not successful.\n")
}


# loc.trait has unique identifiers for all trait-covariate pairs
loc.trait<-apply(rs,1,function(x){return(paste(x[1],x[2],sep="_"))})

# loc.trait.covariate is a list of these traits, assigned to each covariate
loc.trait.covariate<-sapply(covariates,function(covar){
	return(loc.trait[rs[,3]==covar])
},USE.NAMES=TRUE)

## trait.covariate is a list of traits assigned to a covariate
trait.covariate<-sapply(covariates,function(covar){
	line.selection<-(rs[,"covariates"]==covar)
	return(rs[line.selection,"Trait"])
})

# prepare the output file
prepareOutput<-function(filename) {
	if (is.null(filename)) {
		stop("prepareOutput has NULL as filename")
	}
	if (is.null(opt$interactive)) {
		if (is.null(opt$format) || "png" == opt$format) {
			png(filename,width=width.pixel,height=height.pixel)
		}
		else if ("pdf" == opt$format) {
			pdf(filename,width=width.inch,height=height.inch)
		}
		else if ("jpg" == opt$format  || "jpeg" == opt$format) {
			jpg(filename,width=width.pixel,height=height.pixel)
		}
		else if ("gif" == opt$format) {
			jpg(filename,width=width.pixel,height=height.pixel)
		}
		else {
			cat("Unknown format ",opt$format,"\n")
			q(status=1);
		}
	}
}


#
#	V E N N  -  exact locus - trait pairing
#

f<-paste(opt$output,"_","exact_trait",".",opt$format,sep="")
cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
prepareOutput(f)
venn(loc.trait.covariate)
if(is.null(opt$interactive)) {
	dev.off()
}


#
#	V E N N  -  traits only
#

f<-paste(opt$output,"_","trait",".",opt$format,sep="")
cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
prepareOutput(f)
venn(loc.trait.covariate)
if(is.null(opt$interactive)) {
	dev.off()
}


# retrieving marker data
rs.map<-dbGetQuery(con, "SELECT marker, cmorgan_rqtl, chr, bp FROM map ORDER BY chr,cmorgan_rqtl")
rs.map.cM2bp <- sapply(unique(rs.map[,"chr"]),function(X){
				#print(paste("Chr:",X))
				subset<-(rs.map[,"chr"]==X)
				#print(which(subset))
				data.pairs.relevant<-rs.map[subset,c("cmorgan_rqtl","bp")]
				#print(data.pairs.relevant)
				approxfun(data.pairs.relevant)
			},USE.NAMES=TRUE)

rs.map.bp2cM <- sapply(unique(rs.map[,"chr"]),function(X){
				#print(paste("Chr:",X))
				subset<-(rs.map[,"chr"]==X)
				#print(which(subset))
				data.pairs.relevant<-rs.map[subset,c("bp","cmorgan_rqtl")]
				#print(data.pairs.relevant)
				approxfun(data.pairs.relevant)
			},USE.NAMES=TRUE)


# formerly
#disease_qtl<-read.table("/nfshome/grimm/gitEqtlRepo/data/xls/DAPVGdisease_loci_T_Olsson_090320.csv", sep=",",header=T)

# For testing:
# disease_qtl<-dbGetQuery(con, paste("SELECT name, chr, start_bps, stop_bps, species", "FROM qtl.eae_qtl", "WHERE species='Rattus_norvegicus'", "AND start_bps IS NOT NULL and stop_bps IS NOT NULL",sep=" "));

disease_qtl<-dbGetQuery(con, paste("SELECT name, chr, start_bps, stop_bps, species",
                                   "FROM qtl.eae_qtl",
				   "WHERE species='ENSEMBLSPECIESSEARCHURL'",
				     "AND start_bps IS NOT NULL and stop_bps IS NOT NULL",sep=" "));
isInQTL<-function(pos,chr) {
	s<-disease_qtl[,"chr"]==chr;
	a<-(disease_qtl[,"start_bps"]<=pos)
	b<-(disease_qtl[,"stop_bps"]>=pos)
	r<-s&a&b
	return(any(r))
}


dbDisconnect(con)

markerDownstreamMarker<-function(Locus) {
	pos<-which(rs.map$marker==Locus)
	if (0 == pos) {
		stop("Should not be reached in markerDownstreamMarker\n")
	}
	else if (pos<nrow(rs.map) && rs.map$chr[pos+1]==rs.map$chr[pos]) {
		v<-rs.map$marker[pos+1]
	}
	else {
		v<-"end"
	}
	return(v)
}

markerUpstreamMarker<-function(Locus) {
	pos<-which(rs.map$marker==Locus)
	if (0 == pos) {
		stop("Should not be reached in markerUpstreamMarker\n")
	}
	else if (pos>1 && rs.map$chr[pos-1]==rs.map$chr[pos]) {
		v<-rs.map$marker[pos-1]
	}
	else {
		v<-"begin"
	}
	return(v)
}

# Transformation of locations to such of neighbouring markers
marker.trait<-NULL
for (i in 1:nrow(rs)) {
	if (!is.null(opt$debug)) cat(i,"\n")
	chr<-rs$chromosome[i] ; locus<-rs$Locus[i] ; cm<-rs$cMorgan_Peak[i] ; bp<-rs.map.cM2bp[[chr]](cm) ; inDiseaseQTL<-isInQTL(bp,chr)
	if (1 == sum(rs.map$marker==rs$Locus[i])) {         # The locus is assigned directly to a marker
		marker.trait.value<-c(paste(rs$Locus[i],markerDownstreamMarker(rs$Locus[i]),rs$Trait[i],sep="_"),rs$covariates[i],inDiseaseQTL)
		if(is.null(marker.trait)) { marker.trait<-marker.trait.value } else { marker.trait<-rbind(marker.trait,marker.trait.value) }
		marker.trait.value<-c(paste(markerUpstreamMarker(rs$Locus[i]),rs$Locus[i],rs$Trait[i],sep="_"),rs$covariates[i],inDiseaseQTL)
		if(is.null(marker.trait)){ marker.trait<-marker.trait.value } else { marker.trait<-rbind(marker.trait,marker.trait.value) }
	} else if (0 == sum(rs.map$marker==rs$Locus[i])) {  # The locus is between two markers
		rs.map.chr<-rs.map[which(rs.map$chr==rs$chromosome[i]),]
		pos<-sum(rs.map.chr$cmorgan_rqtl<rs$cMorgan_Peak[i])
		if(pos==0){
			marker.trait.value<-c(paste("begin",rs.map.chr$marker[1],rs$Trait[i],sep="_"),rs$covariates[i],inDiseaseQTL)
		}
		else if(pos==nrow(rs.map.chr)){
			marker.trait.value<-c(paste(rs.map.chr$marker[nrow(rs.map.chr)],"end",rs$Trait[i],sep="_"),rs$covariates[i],inDiseaseQTL)
		}
		else{
			marker.trait.value<-c(paste(rs.map.chr$marker[pos],rs.map.chr$marker[pos+1],rs$Trait[i],sep="_"),rs$covariates[i],inDiseaseQTL)
		}
		if(is.null(marker.trait)){ marker.trait<-marker.trait.value } else{ marker.trait<-rbind(marker.trait,marker.trait.value) }
	} else {
		cat("E: Internal error - locus is assigned to two markers - impossible.\n")
	}
}
colnames(marker.trait)<-c("Marker-Trait","Covariates","InDiseaseQTL")


marker.trait.covariate<-sapply(covariates,function(covar){
	return(marker.trait[marker.trait[,2]==covar,])
},USE.NAMES=TRUE)

f<-paste(opt$output,"_","flanking_trait",".",opt$format,sep="")
cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
prepareOutput(f)
venn(sapply(marker.trait.covariate,function(X)X[,1],USE.NAMES=TRUE))
if(is.null(opt$interactive)) {
	dev.off()
}

f<-paste(opt$output,"_","flanking_trait_indiseaseqtl",".",opt$format,sep="")
cat(paste("<a href=\"",f,"\">",f,"</a>\n",sep=""))
prepareOutput(f)
venn(sapply(marker.trait.covariate,
	    function(X){
		inDiseaseQTL<-X[,3]=="TRUE"
		columnToReturn<-X[,1]
		return(columnToReturn[inDiseaseQTL])
	    },USE.NAMES=TRUE))
if(is.null(opt$interactive)) {
	dev.off()
}
