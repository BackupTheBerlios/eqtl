
TEMPLATEWARNINGHASH

doc<-"

=head1 NAME

determineCorrelations.R - prepare upload of correlation data

=head1 SYNOPSIS

echo "source('determineCorrelations.R')" | R --vanilla --no-save

=head1 DESCRIPTION

This script calculates all correlations between 

=over 4

=item the expression levels of all genes

=item between expression levels and the classical traits.

=back

For larger projects, only the calculation of the correlation
coefficients is practical to be applied for gene-gene comparisons.

For comparisons with classical phenotypes and smaller projects
may also determine the p-Value for the likelihood
to make this observation on uncorrelated data.

=head1 AUTHOR

Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>

=head1 COPYRIGHT

University of LE<uuml>beck, Germany, 2009

=cut

"

TEMPLATEWARNINGHASH

source("R/load.data.R")

d<-load.data("expression")$numeric

#m<-t(as.matrix(d[,p])) # did not work for me any more
#m<-as.numeric(as.matrix(d[,p]))
#dim(m)<-c(length(m)/length(p),length(p))
m<-t(d)
#rownames(m)<-colnames(d)[p]
#colnames(m)<-rownames(d)
# freeing some memory
rm("d")


if (TRUE) {

	# recieving all-against-all matrix or for all genes
	#m.method<-"spearman"
	#m.method<-"pearson"
	m.method<-"kendall"
	m.cor<-cor(m,method=m.method)
	con.out.fname<-paste("trait_trait_cor_",m.method,".sql",sep="")
	if (file.exists(con.out.fname)) {
		unlink(con.out.fname)
	}
	con.out<-file(description=con.out.fname,open="w")
	n.row<-nrow(m.cor)
	num.shown<-300
	# writing best and worst for every gene into traits table
	for (i in 1:n.row) {
		if (0==i%%100) {
			cat(i,"\n")
		}
		X<-m.cor[i,]
		X.self<-colnames(m)[i]
		# select NAs (from all 0 lines) and the correlation with itself
		X.sub<-X[!is.na(X) & names(X)!=X.self]
		o<-order(X.sub)
		o.rev<-rev(o)
		# the first will be the negative correlated ones
		cat(file=con.out,
		    paste("UPDATE trait SET ",
				"traits_pos_cor='",         paste(names(X.sub[o.rev][1:num.shown]),collapse=","),"', ",
				"traits_pos_cor_rho='",     paste(X.sub[o.rev][1:num.shown],collapse=","),"', ",
				"traits_pos_cor_most='",    names(X.sub[o.rev][1]),"', ",
				"traits_pos_cor_most_rho=", X.sub[o.rev][1],", ",
				"traits_neg_cor='",         paste(names(X.sub[o][1:num.shown]),collapse=","),"', ",
				"traits_neg_cor_rho='",     paste(X.sub[o][1:num.shown],collapse=","),"', ",
				"traits_neg_cor_most='",    names(X.sub[o][1]),"', ",
				"traits_neg_cor_most_rho=", X.sub[o][1]," ",
			  "WHERE trait_id='",X.self,"';\n",
				sep=""))
	}
	close(con.out)

} else {

	# read in phenotypes
	if (CLINICALPHENOTYPESWITHGENOTYPES) {
		d<-read.table(file="CSVDATABASE/GENOFILE",dec="GENOFIELDDEC",sep="GENOFIELDSEP",header=TRUE,na.strings=c("-"),skip=GENOLINESSKIPNO)
		d.cols<-is.na(d[1,]) | ""==d[1,]
		d.rows<-!(is.na(d[,1]) | ""==d[,1])
		d.m<-as.matrix(d[d.rows,d.cols])
	} else {
		# expecting a separate file only for the phenotypes
		d.m<-read.table(file="CSVDATABASE/SCOREFILE",dec="SCOREFIELDDEC",sep="SCOREFIELDSEP",header=TRUE,skip=SCORELINESSKIPNO,row.names=1,na.strings=c("-","X","x"))
	}

	# perform 
	testfunction<-function(X,Y,method="spearman") {
		r<-cor.test(X,Y,alternative="two.sided",method=method,exact=FALSE)
		return(c(rho=r[["estimate"]],p.value=r[["p.value"]]))
	}

	# retrieve individuals names from m (rows) and d.m (rows)
	retrieveIndividualIds<-function(IndividualIds) {
		re<-regexpr(text=IndividualIds,pattern="[0-9]+",perl=TRUE)
		re.2<-rbind(text=IndividualIds,re,attr(re,"match.length"))
		r<-apply(re.2,2,function(X) {
			substr(X[1],
			      start=as.numeric(X[2]),
			      stop=as.numeric(X[2])+as.numeric(X[3])-1)
		})
		return(r)
	}

	# these may be redundant (e.g. copy)
	expresssion.data.individuals<-retrieveIndividualIds(rownames(m))
	# these must be unique
	clinical.score.individuals<-retrieveIndividualIds(rownames(d.m))
	if (any(duplicated(clinical.score.individuals))) {
		stop(paste("Found duplicated identifiers for individuals: ",
		           paste(clinical.score.individuals[!duplicated(clinical.score.individuals)],collapse=","),
			   "\n",sep=""))
	}

	ids.shared<-clinical.score.individuals[clinical.score.individuals%in%expresssion.data.individuals]
	d.m.assigned<-d.m[retrieveIndividualIds(rownames(d.m)) %in% ids.shared,]
	rownames(d.m.assigned)<-retrieveIndividualIds(rownames(d.m.assigned))
	d.m.assigned.rownames<-rownames(d.m.assigned)

	m.assigned<-m[retrieveIndividualIds(rownames(m)) %in% ids.shared,]
	m.assigned.individuals<-retrieveIndividualIds(rownames(m.assigned))

	find.position.of<-function(what,in.where) {
		if(any(duplicated(in.where))) stop(paste("find.position.of: found duplicates: ",
							  paste(in.where[duplicated(in.where)],collapse=",",sep=""),
							  "\n",sep=""))
		sapply(what,function(X){
			which(X==in.where)
		})
	}


	# perform over all clinical phenotypes - this number will be small

	#p.no<-1
	for(p.no in 1:ncol(d.m)) {

		p.name<-tolower(colnames(d.m)[p.no])
		cat(p.name,"\n")

		d.m.curr<-d.m.assigned[,p.no]
		d.m.curr.index<-!is.na(d.m.curr)
		d.m.curr.takeme<-d.m.curr[d.m.curr.index]

		if (10>=sum(d.m.curr.index)) {
			cat("skipping clinical phen ",p.name,": too few values left after NA-check\n",sep="")
		} else if (0 == sd(d.m.curr.takeme,na.rm=TRUE)) {
			cat("skipping clinical phen ",p.name,": sd is 0\n",sep="")
		} else {
			# create outputfile, one per phen
			con.out.fname<-paste("trait_phen_",p.name,"_cor.sql",sep="")
			if (file.exists(con.out.fname)) {
				cat("Removing existing file ",con.out.fname,"\n",sep="")
				unlink(con.out.fname)
			}
			con.out<-file(con.out.fname,"w")

			expression.data.take.these<-m.assigned.individuals %in% d.m.assigned.rownames[d.m.curr.index]
			d.m.curr.takeme.positions<-find.position.of(m.assigned.individuals[expression.data.take.these],
								     d.m.assigned.rownames[d.m.curr.index])
			d.m.curr.takeme.adjusted<-d.m.curr.takeme[d.m.curr.takeme.positions]
			v<-apply(m.assigned,2,function(Expression){
				# find those rows
				Expression.not.paired.with.na<-Expression[expression.data.take.these]
				testfunction(Expression.not.paired.with.na,
					     d.m.curr.takeme.adjusted)
			})

			for(i in 1:ncol(v)) {
				if (!is.na(v[1,i])) {
					cat(file=con.out,
					    paste("INSERT INTO trait_phen_cor SET trait_id='",
					    		colnames(v)[i],
							"', phen='",p.name,"', rho=",v[1,i],
							", p=",v[2,i],";\n",sep=""))
				}
			}
			close(con.out)
		}
	}
}


