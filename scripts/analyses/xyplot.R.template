	#!/usr/bin/env r

	doc<-"

	=head1 NAME

	xyplot.R - prepare scatter plots for traits and phens

	=head1 SYNOPSIS

	xyplot.R [options]

	=head1 DESCRIPTION

	This script provides scatter plots, but other than scatter_all.R
	it does not plot the chromosomal locations of the traits, but
	plots several such traits against each other.

	=over 4

	=item verbose <level>

	adds status reports - possibly insightful to interpret problems from users. A distinction between levels is not made.

	=item help

	instructions to use pod2man for seeing this documentation.

	=item interactive

	to be set if the user shall be interactively working with the R shell rather than preparing an image file or a PDF.

	=item format

	the format in which the image is to be saved - pdf, jpeg, png are currently supported.

	=item output

	the output file to which to write - if there is a file to write to.

	=item selection_(xaxis|yaxis|colour|symbol)  (trait|phen|marker)

	only one parameter can be shown for every dimension, and these selection_xaxis or selection_colour etc. specify where to look for every axis. Only exactly one of the strings 'trait','phen' or 'marker' shall be given as an argument.

	For the time speaking this is not implemented. 

	=item value_(xaxis|yaxis|colour|symbol) value

	For every axis / dimension, three different values can be specified for the selecion of a molecular trait, a classical phenotype or a genetic marker. But only one of those is read, as determined by the selection_X parameter.

	=item graphical parameters:

	=over 8

	=item --linecolour I<string>

	name of colour of lines to separate the chromosomes

	=item --linewidth I<number>

	width of lines separating the chromosomes

	=item --linetype 0-5

	specification of the type of lines tha shall be separating the chromosomes, defaults to 3 (dotted)

	=item --axescolour I<string>

	colour of axes

	=item --axeswidth I<number>

	width of axes

	=item --axestype I<number>

	type of axes

	=item --imagewidth I<number>

	width of image, the units depend on the format of the image, png needs the number of pixels, pdf needs inches.

	=back

	=back

	=head1 AUTHORS

	Steffen Moeller <steffen.moeller@uk-sh.de>

	=head1 COPYRIGHT

	(C) 2009 University of LE<uuml>beck, Germany
	(C) 2010 University Clinics Schleswig-Holstein

	=cut

	"

	width.pixel<-3*480
	width.inch<-11
	height.pixel<-width.pixel
	height.inch<-width.inch
	bp.offset.extra<-0.15*10^8
	cM.offset.extra<-8

	# indication of percentage separation betweeen
	# chromosomes
	offset.percent<-2

	library(RMySQL)
	library(getopt)

	# cat("I was here 0.\n")

	opt = getopt(matrix(c(                                            
	   'verbose'         , 'v', 2, "integer"  , "gives information on the internal status of program",
	   'help'            , 'h', 0, "logical"  , "gives instructions on how to retrieve information on how to use the program",
	   'interactive'     , 'i', 0, "logical"  , "indication that this script is run from the UNIX shell",
	   'selection_xaxis' , 'X', 0, "character", "parameter to display for X axis, defaults to 'trait'",
	   'selection_yaxis' , 'Y', 0, "character", "parameter to display for Y axis, defaults to 'trait'",
	   'selection_colour', 'D', 0, "character", "parameter to show as colour, defaults to 'none'",
	   'selection_symbol', 'G', 0, "character", "parameter to show as symbol (gestalt), defaults to 'none'",
	   'value_xaxis'     , 'C', 0, "character", "parameter to display for X axis, defaults to 'trait'",
	   'value_yaxis'     , 'V', 0, "character", "parameter to display for Y axis, defaults to 'trait'",
	   'value_colour'    , 'B', 0, "character", "parameter to show as colour, defaults to 'none'",
	   'value_symbol'    , 'N', 0, "character", "parameter to show as symbol (gestalt), defaults to 'none'",
	   'format'          , 'f', 1, "character", "the format of the image that should present the plot",
	   'output'          , 'o', 1, "character", "name of output file",
	   'display'         , 'd', 2, "character", "defaults to lod, alternatives are rank and p.value",
	   'main'            , 'M', 1, "character", "main title of the plot",
	   'sub'             , 'S', 1, "character", "sub title of the plot",
	   'imagewidth'      , 'W', 1, "integer"  , "width of image, represented in dependency on the format",
	   'imageheight'     , 'H', 1, "integer"  , "height of image, represented in dependency on the format",
	   'linecolour'      , 'a', 1, "character", "colour of lines separating the chromosomes",
	   'linewidth'       , 'w', 1, "double"   , "width of lines separating the chromosomes",
	   'linetype'        , 't', 1, "integer"  , "type of lines separating the chromosomes",
	   'axescolour'      , 'b', 1, "character", "colour of axes",
	   'axeswidth'       , 'x', 1, "double"   , "width of axes",
	   'axestype'        , 'y', 1, "integer"  , "line type of axes",
	   'legend'          , 'e', 2, "logical"  , "set to add a legend"
	   ),ncol=5,byrow=TRUE),
	   debug=TRUE)

	if (!is.null(opt$verbose)) cat("I was here 1.\n")

	if ( !is.null(opt$help) ) {
	   cat("Please run 'pod2man scatter_all.R | nroff -man | less' on this script to gain more insights.\n");
	   cat(paste("Output can be expected at file '",opt$output,"'.\n",sep=""))
	   q(status=1);
	}


	mandatory.attributes<-c('selection_xaxis', 'selection_yaxis', 'value_xaxis', 'value_yaxis'
				 # ,'selection_colour', 'selection_symbol', 'value_colour', 'value_symbol' 
	)

mandatory.attributes.missing<-NULL
for(ma in mandatory.attributes) {
	if (is.null(opt[[ma]])) mandatory.attributes.missing <- c(mandatory.attributes.missing,ma)
}
if (0<length(mandatory.attributes.missing)) {
	cat("The following mandatory attributes are not set: ",
	    paste(mandatory.attributes.missing,collapse=", ",sep=""),
	    "\n")
	q(status=1)
}


if (is.null(opt$output)) {
   if (!is.null(opt$verbose)) cat("Set ouput to default value.\n")
   opt[["output"]]<-"/tmp/default_output_scatter_all.pdf"
}

if (is.null(opt$format)) {
   opt[["format"]]<-"png";
   if (!is.null(opt$verbose)) cat("Set format to default value '",opt$format,"'.\n")
}

if (is.null(opt$linecolour)) {
   opt[["linecolour"]]<-"lightgray"
   if (!is.null(opt$verbose)) cat("Set colour for lines : ",opt$linecolour,"\n")
}

if (is.null(opt$linewidth)) {
   opt[["linewidth"]]<-1
   if (!is.null(opt$verbose)) cat("Set width for lines : ",opt$linewidth,"\n")
}

if (is.null(opt$linetype)) {
   opt[["linetype"]]<-3
   if (!is.null(opt$verbose)) cat("Set type for lines : ",opt$linetype,"\n")
}

if (is.null(opt$axeswidth)) {
   opt[["axeswidth"]]<-3
   if (!is.null(opt$verbose)) cat("Set width for axes : ",opt$axeswidth,"\n")
}

if (is.null(opt$axescolour)) {
   opt[["axescolour"]]<-3
   if (!is.null(opt$verbose)) cat("Set colour for axes : ",opt$axescolour,"\n")
}

if (is.null(opt$imagewidth)) {
   if (is.null(opt$format) || opt$format %in% c("png","jpeg","jpg","gif")) {
	opt[["imagewidth"]]<-width.pixel
   }
   else if ("pdf" == opt$format) {
	opt[["imagewidth"]]<-width.inch
   }
   else {
	cat("Unknown format ",opt$format,"\n")
	q(status=1);
   }
}

if (is.null(opt$imageheight)) {
   if (is.null(opt$format) || opt$format %in% c("png","jpeg","jpg","gif")) {
	opt[["imageheight"]]<-height.pixel
   }
   else if ("pdf" == opt$format) {
	opt[["imageheight"]]<-height.inch
   }
   else {
	cat("Unknown format ",opt$format,"\n")
	q(status=1);
   }
}


# Ppreparation of the output file

if (is.null(opt$interactive)) {
	if (file.exists(opt$output)) {
		cat(paste("Removing file '",opt$output,"'\n",sep=""))
		file.remove(opt$output);
		if (file.exists(opt$output)) {
			cat("Could not remove file",opt$output,".\n")
			q(status=1)
		}
	}
	if (is.null(opt$format) || "png" == opt$format) {
		png(opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	}
	else if ("pdf" == opt$format) {
		pdf(opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	}
	else if ("jpg" == opt$format  || "jpeg" == opt$format) {
		jpg(opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	}
	else if ("gif" == opt$format) {
		jpg(opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	}
	else {
		cat("Unknown format ",opt$format,"\n")
		q(status=1)
	}
}


##### HERE THE MAIN PROGRAM STARTS #####


source('BASEDIR/scripts/analyses/R/maxcminc.R')
source('BASEDIR/scripts/analyses/R/load.data.R')
source('BASEDIR/scripts/analyses/R/analyseCorrelationForMarkers.R')

a<-analyzeclusters(opt$selection_xaxis,  opt$value_xaxis,
		   opt$selection_yaxis,  opt$value_yaxis,
		   opt$selection_symbol, opt$value_symbol,
		   opt$selection_colour, opt$value_colour,
		   draw=T)

cat("<pre>")
print(a)
cat("</pre>\n")

####n CLOSIN GRAPHICS         #####

if(is.null(opt$interactive)) {
	dev.off()
}
