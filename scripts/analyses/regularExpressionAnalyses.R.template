
TEMPLATEWARNINGHASH

doc<-"

=head1 NAME

regularExpressionAnalyses.R - prepare upload of correlation data

=head1 SYNOPSIS

echo source('regularExpressionAnalyses.R') | R --vanilla --no-save

=head1 DESCRIPTION

This script calculates 

=over 4

=item T-Test

=item Wilcoxin rank test

=back

For (initially) only the binary scores, i.e. EAE, sex and cross.

=head1 AUTHOR

Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>

=head1 COPYRIGHT

University of LE<uuml>beck, Germany, 2009

=cut

"

TEMPLATEWARNINGHASH

# read in data after conversion with OpenOffice from xls
# further abstractions are required to adapt for multiple
# organisms.
d<-read.delim(file="CSVDATABASE/PHENOFILE",dec=",",sep="PHENOFIELDSEP",row.names=1,skip=1)

# columns with expression data
p<-grep("^MT",colnames(d))

# convert to (numerical) matrix
# selecting mouse-columns,
# transposing since genes are the observations that shall be compared
m<-t(as.matrix(d[,p]))
# freeing some memory
rm("d")


# read in phenotypes
d<-read.table(file="CSVDATABASE/GENOFILE",dec=".",sep=",",header=TRUE,na.strings=c("-"))
d.cols<-is.na(d[1,]) | ""==d[1,]
d.rows<-!(is.na(d[,1]) | ""==d[,1])
d.m<-as.matrix(d[d.rows,d.cols])


# find binary phenotypes
d.m.quantity <- apply(d.m,2,function(X){
	length(table(X))
})

#m.test<-m[,1:200]

for(covar in colnames(d.m)[2==d.m.quantity]) {
	cat("Working on phenotype '",covar,"'\n",sep="")

	covar.table<-table(d.m[,covar])
	covar.table.names<-names(covar.table)

	#  indices for the expression data to decide what values to compare
	individuals.small<-which(d.m[,covar]==covar.table.names[1])
	individuals.large<-which(d.m[,covar]==covar.table.names[2])

	# ordering of expression data
	f<-apply(m,2,function(X){
		a<-t.test(X[individuals.small],X[individuals.large],paired=FALSE)
		b<-wilcox.test(X[individuals.small],X[individuals.large],paired=FALSE)
		return(c(t=a$p.value,wilcox=b$p.value))
	})
	write.table(t(f),file=paste("tests_",covar,".tsv",sep=""),
			append=FALSE,sep="\t",quote=FALSE,row.names=TRUE,col.names=TRUE)
}

