#!/usr/bin/env r

doc <- "

=head1 NAME

PvalueVsLod.R - plot LOD scores versus P-value

=head1 SYNOPSIS

PvalueVsLod.R [options]

=head1 DESCRIPTION

There is a general insecurity about thresholds and what QTLs to trust as real.
This script generates a plot of P values and LOD scores against each other.
This is not an immediate answer, but may generate insights for the one or other.

=over 4

=item verbose <level>

adds status reports - possibly insightful to interpret problems from users. A distinction between levels is not made.

=item help

instructions to use pod2man for seeing this documentation.

=item MeanMin <value>

Minimal expression level for a trait to be shown.

=item LODmin

Minimal LOD score for a QTL to be shown.

=item PvalueMax

Maximal P-value for a QTL to be shown

=item interactive

to be set if the user shall be interactively working with the R shell rather than preparing an image file or a PDF.

=item format

the format in which the image is to be saved - pdf, jpeg, png, svg and eps are currently supported.

=item covariates

the covariates that should be compared

=item output

the output file to which to write - if there is a file to write to.

=item --qtls I<comma-separated list of QTLs>

expects list of QTLs (their IDs in the database) that shall be represented on the plot -- still needs to be implemented

=item --linecolour I<string>

name of colour of lines to separate the chromosomes

=item --linewidth I<number>

width of lines separating the chromosomes

=item --linetype 0-5

specification of the type of lines tha shall be separating the chromosomes, defaults to 3 (dotted)

=item --legendmincolour

set if a legend shall be shown

=item --legendmincolour I<string>

colour to use for dots indicating minimal statistical significance (but above threshold), use together with --legendscheme custom, defaults to I<yellow>

=item --legendmaxcolour I<string>

colour to use for dots indicating maximal statistical significance, use together with --legendscheme custom, defaults to I<red>

=item --legendscheme I<string>

readily prepared schemes for colouring, available are I<custom>, I<yellowbrown>. When choosing I<custom>, this will interpolate between the colours given for --legendmincolour and --legendmincolour.

=item --axescolour I<string>

colour of axes

=item --axeswidth I<number>

width of axes

=item --axestype I<number>

type of axes

=item --imagewidth I<number>

width of image, the units depend on the format of the image, png needs the number of pixels, pdf needs inches.

=back

=head1 AUTHORS

Steffen Moeller <moeller@inb.uni-luebeck.de>,

=head1 COPYRIGHT

2012 University Clinics Schleswig-Holstein, LE<uuml>beck, Germany

=cut

"

width.pixel<-3*480
width.inch<-11
height.pixel<-width.pixel
height.inch<-width.inch
#bp.offset.extra<-0.15*10^8
#cM.offset.extra<-8
bp.offset.extra<-0
cM.offset.extra<-0

# indication of percentage separation betweeen
# chromosomes
offset.percent<-2

library(RMySQL)
library(graphics)
library(getopt)

# cat("I was here 0.\n")

opt = getopt(matrix(c(                                            
   'verbose'        , 'v', 2, "integer"  ,"gives information on the internal status of program",
   'help'           , 'h', 0, "logical"  ,"gives instructions on how to retrieve information on how to use the program",
   'MeanMin'        , 'm', 1, "double"   ,"the threshold for a minimal expression level that the trait should have to be selected for display (as a dot on the plot)",
   'LODmin'         , 'l', 1, "double"   ,"the minimal LOD score the expression QTL should have reached",
   'LODmax'         , 'L', 1, "double"   ,"the maximal LOD score the expression QTL allowed in (defaults to THRESHOLD)",
   'PvalueMax'      , 'p', 1, "double"   ,"the maximal P value the expression QTL may have reached to be considered significant",
   'PvalueMin'      , 'P', 1, "double"   ,"the minimal P value the expression QTL may have reached to leave out the most significant eQTL",
   'interactive'    , 'i', 0, "logical"  ,"indication that this script is run from the UNIX shell",
   'format'         , 'f', 1, "character","the format of the image that should present the plot",
   'covariates'     , 'c', 1, "character","covariates the plot shall be run for",
   'output'         , 'o', 1, "character","name of output file",
   'qtls'           , 'q', 2, "character","list of QTLs (their IDs in the database) that shall be represented on the plot",
   'qtlsLabels'     , 'Q', 0, "character","set if label of classical QTL should appear",
   'display'        , 'd', 2, "character","defaults to lod, alternatives are rank and p.value",
   'main'           , 'M', 1, "character","main title of the plot",
   'sub'            , 'S', 1, "character","sub title of the plot",
   'imagewidth'     , 'W', 1, "integer"  ,"width of image, represented in dependency on the format",
   'imageheight'    , 'H', 1, "integer"  ,"height of image, represented in dependency on the format",
   'linecolour'     , 'a', 1, "character","colour of lines separating the chromosomes",
   'linewidth'      , 'w', 1, "double"   ,"width of lines separating the chromosomes",
   'linetype'       , 't', 1, "integer"  ,"type of lines separating the chromosomes",
   'axescolour'     , 'b', 1, "character","colour of axes",
   'axeswidth'      , 'x', 1, "double"   ,"width of axes",
   'axestype'       , 'y', 1, "integer"  ,"line type of axes",
   'legendshow'     , 'e', 2, "logical"  ,"set to add a legend",
   'legendmincolour', 'A', 1, "character","colour to chose for QTL representations with minimal significance",
   'legendmaxcolour', 'B', 1, "character","colour to chose for QTL representations with maximal significance",
   'legendscheme'   , 's', 1, "character","set to 'custom' to have the legend interpolate between legendmincolour and legendmaxcolour, or 'yellowbrown'"
   ),ncol=5,byrow=TRUE),
   debug=TRUE)

if (!is.null(opt$verbose)) cat("I was here 1.\n")

if ( !is.null(opt$help) ) {
   cat("Please run 'pod2man PvalueVsLod.R | nroff -man | less' on this script to gain more insights.\n");
   cat(paste("Output can be expected at file '",opt$output,"'.\n",sep=""))
   q(status=1);
}

if (is.null(opt$output)) {
   if (!is.null(opt$verbose)) cat("Set ouput to default value.\n")
   opt[["output"]]<-"/tmp/default_output_PvalueVsLod.pdf"
}
if (is.null(opt$MeanMin)) {
   if (!is.null(opt$verbose)) cat("Set MeanMin to default value.\n")
   opt[["MeanMin"]]<- -1
}
if (is.null(opt$LODmin)) {
   if (!is.null(opt$verbose)) cat("Set LODmin to default value: THRESHOLD (minimal requested for db storage)\n")
   opt[["LODmin"]]<- 0 
}
if (is.null(opt$PvalueMax)) {
   if (!is.null(opt$verbose)) cat("Set PvalueMax to default value: 1.\n")
   opt[["PvalueMax"]]<- 1
}
if (is.null(opt$PvalueMin)) {
   if (!is.null(opt$verbose)) cat("Set PvalueMin to default value.\n")
   opt[["PvalueMin"]]<- 0
}
if (is.null(opt$format)) {
   opt[["format"]]<-"png";
   if (!is.null(opt$verbose)) cat("Set format to default value '",opt$format,"'.\n")
}
if (is.null(opt$display)) {
   opt[["display"]]<-"lod";
   if (!is.null(opt$verbose)) cat("Set variable to display to '",opt$display,"'.\n")
}

if (is.null(opt$linecolour)) {
   opt[["linecolour"]]<-"lightgray"
   if (!is.null(opt$verbose)) cat("Set colour for lines : ",opt$linecolour,"\n")
}

if (is.null(opt$linewidth)) {
   opt[["linewidth"]]<-1
   if (!is.null(opt$verbose)) cat("Set width for lines : ",opt$linewidth,"\n")
}

if (is.null(opt$linetype)) {
   opt[["linetype"]]<-3
   if (!is.null(opt$verbose)) cat("Set type for lines : ",opt$linetype,"\n")
}

if (is.null(opt$axeswidth)) {
   opt[["axeswidth"]]<-3
   if (!is.null(opt$verbose)) cat("Set width for axes : ",opt$axeswidth,"\n")
}

if (is.null(opt$axescolour)) {
   opt[["axescolour"]]<-3
   if (!is.null(opt$verbose)) cat("Set colour for axes : ",opt$axescolour,"\n")
}

if (is.null(opt$imagewidth)) {
   if (is.null(opt$format) || opt$format %in% c("png","jpeg","jpg","gif")) {
	opt[["imagewidth"]]<-width.pixel
   }
   else if (opt$format %in% c("pdf","svg","eps")) {
	opt[["imagewidth"]]<-width.inch
   }
   else {
	cat("Unknown format ",opt$format,"\n")
	q(status=1);
   }
}

if (is.null(opt$imageheight)) {
   if (is.null(opt$format) || opt$format %in% c("png","jpeg","jpg","gif")) {
	opt[["imageheight"]]<-height.pixel
   }
   else if (opt$format %in% c("pdf","svg","eps")) {
	opt[["imageheight"]]<-height.inch
   }
   else {
	cat("Unknown format ",opt$format,"\n")
	q(status=1);
   }
}

if (is.null(opt$legendmincolour)) opt[["legendmincolour"]] <- "yellow"
if (is.null(opt$legendmaxcolour)) opt[["legendmaxcolour"]] <- "red"

if (!is.null(opt$verbose)) cat("I was here 2.\n")

con <- dbConnect(MySQL(),host="DATABASEHOSTLOCAL",password="DATABASEEQTLPASSWORD",db="DATABASEEQTLNAME",user="DATABASEEQTLUSER")

if (!is.null(opt$verbose)) cat("I was here 3.\n")


#
#  Retrieve classical QTL to show
#

cQTLs<-NULL
if (FALSE) {
cQTLs.query <- paste("select name,chr,start_bps,stop_bps,species from qtl.eae_qtl where species='","ENSEMBLSPECIESSEARCHURL","' and stop_bps-start_bps>0;",sep="")
cQTLs<-dbGetQuery(con,cQTLs.query)
cat("<p>These are the classical QTL available for the organism ENSEMBLSPECIESSEARCHURL:</br><pre>\n")
print(cQTLs)
cat("</pre></p>\n")
}


# Find covariates to work on

q <- "select distinct covariates from qtl;"
covariates.queried<-c("none",dbGetQuery(con,q)[,"covariates"])
cat(paste("Found the following covariates in the database: '",
          paste(covariates.queried,collapse="';'",sep=""),"'\n",sep=""))

if (!is.null(opt$verbose)) cat("I was here 6.\n")

covariates.filter.string<-opt$covariates
if(is.null(covariates.filter.string)) {
	cat("W: Falling back to default values for covariates.\n")
	covariates.filter.string<-"max_add;bd_int;dud_int;dud_add;max_add,dud_add;eae_add;eae_add,dud_add;sud_add"
}
covariates.filter.list<-strsplit(covariates.filter.string,";")[[1]]

if (!is.null(opt$verbose)) cat("I was here 7.\n")


covariates<-covariates.queried[covariates.queried %in% covariates.filter.list]

cat(paste("Working with the following covariates: ",paste(covariates,collapse=";",sep=""),".\n",sep=""))



# do it for all covariates


if (is.null(opt$interactive)) {
	if (file.exists(opt$output)) {
		cat(paste("Removing file '",opt$output,"'\n",sep=""))
		file.remove(opt$output);
		if (file.exists(opt$output)) {
			cat("Could not remove file",opt$output,".\n")
			q(status=1)
		}
	}
	if (is.null(opt$format) || "png" == opt$format) {
		png(opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	} else if ("svg" == opt$format) {
		svg(filename=opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	} else if ("eps" == opt$format) {
		cairo_ps(filename=opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	} else if ("pdf" == opt$format) {
		pdf(opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	} else if ("jpg" == opt$format  || "jpeg" == opt$format) {
		jpg(opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	} else if ("gif" == opt$format) {
		jpg(opt[["output"]],width=opt$imagewidth,height=opt$imageheight)
	} else {
		cat("Unknown format ",opt$format,"\n")
		q(status=1)
	}
}

for(cov in covariates) {

  cat(paste("Working on covariate '",cov,"', used internally as '",if("none" != cov) cov else "","'\n",sep=""))

  # Input for plot

  q <- paste("SELECT ",
	      "Trait,LOD,pvalue,",				# 1 2 3
	      "locus.chr,cMorgan_Peak,",			# 4 5
	      "covariates,",					# 6
	      "trait.chromosome,(trait.start+trait.stop)/2 ", 	# 7 8
	      "as pos ",
           "FROM ",
              "qtl JOIN trait ON trait_id=Trait JOIN locus ON locus.Name=qtl.Locus ",
           "WHERE ",
              "covariates='",if("none" != cov) cov else "","'",sep="")
  if (!is.null(opt$LODmin) && -1 < opt$LODmin) {
	q <- paste(q," AND LOD >= ",opt$LODmin,sep="")
  }
  if (!is.null(opt$PvalueMax) && -1 < opt$PvalueMax && 1>opt$PvalueMax) {
	 q <- paste(q," AND pvalue <= ",opt$PvalueMax,sep="")
  }
  if (!is.null(opt$MeanMin) && -1 < opt$MeanMin) {
	 q <- paste(q," AND mean >= ",opt$MeanMin,sep="")
  }
  q <- paste(q,";",sep="")

#Trait, Locus, LOD, covariates, Chromosome, cMorgan_Peak, cMorgan_Min, cMorgan_Max, Quantile, (LOD-Quantile) as LODdiff , unigene, swissprot_ID, gene_assignment, first_symbol,
#       first_name, ProbeSequence, seqname as chr_name, strand, start as gene_chrom_start,stop as gene_chrom_end,
#       trait.mean, trait.sd 
#
# SELECT Trait, Locus, LOD, covariates, Chromosome, cMorgan_Peak, cMorgan_Min, cMorgan_Max, Quantile, (LOD-Quantile) as LODdiff , unigene, swissprot_ID, gene_assignment, first_symbol,
#       first_name, ProbeSequence, seqname as chr_name, strand, start as gene_chrom_start,stop as gene_chrom_end,
#       trait.mean, trait.sd 
# FROM qtl left join BEARatChip as c on Trait=c.probeset_id join trait on qtl.Trait=trait.trait_id WHERE Chromosome in ('2') AND mean >= 100 AND covariates='bd_int' AND LOD >= 4 ORDER BY LOD DESC
#
#


  if (!is.null(opt$verbose)) {
      cat("Query: ",q,"\n")
  }

  selected.qtl<-dbGetQuery(con,q)

  if (is.null(opt$main)) {
  	opt[["main"]]<-paste("Covariates:",cov)
	if (!is.null(opt$verbose)) cat("Set main title to ",opt$main,"\n")
  }

  if (is.null(opt$sub)) {
  	opt[["sub"]]<-paste("Showing ",switch(opt$display,lod="LOD",opt$display),
			    " of eQTL with LOD>=",opt$LODmin,
			    if (opt$PvalueMax<1) paste(" and P-value<=",opt$PvalueMax,sep="") else "",
			    if (opt$MeanMin>-1) paste(" and mean expression>=",opt$MeanMin,sep="") else "",
			    sep="")
	if (!is.null(opt$verbose)) cat("Set sub title to ",opt$sub,"\n")
  }

  plot(selected.qtl[,2],
       selected.qtl[,3],
       main=opt$main,sub=opt$sub,xlab="LOD - from regression analysis",ylab="P-value - from permutation test")

  #
  # Vertically drawing classical QTL

  if (!is.null(opt$verbose)) {
    cat("Colnames(selected.qtl) : " , paste(colnames(selected.qtl),collapse=",",sep=""),"\n")
    cat("Dim(selected.qtl) : "); print(dim(selected.qtl))
  }

}

if(is.null(opt$interactive)) {
	dev.off()
}
