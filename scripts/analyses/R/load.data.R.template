
TEMPLATEWARNINGHASH

doc<-"

=head1 NAME

load.datac(type)

=head1 DESCRIPTION

The function knows how to read all kinds of data and returns the
respective files. Type may be

=over 8

=item 'expression'

which reads the file 'PHENOFILE', as probes x individuals.

=item 'genotypes'

which reads the file 'GENOFILE'. The results are returned as a list with the following attributes

=over 12

=item chromosome

the chromosomes as they appear for every column with genotyping data

=item cMorgan

the cMorgan position for every marker

=item clinical

the clinical data, returned as individuals x clinical phenotype table

=item genotypes

the genotypes for all the individuals, returned as individualsxmarker table

=back

=back

To use this function, until the library has been formed, run

source('BASEDIR/scripts/analysis/R/load.data.R')

=cut

"

load.data <- function(type) {
  cat("Reading ",type," data\t",sep="")
  rootdir <- paste("BASEDIR","CSVDATABASE",sep="/")
  if ("expression" == type) {
    filename <- paste(rootdir, "PHENOFILE", sep="/")
  } else if ("genotypes" == type) {
    filename <- paste(rootdir, "GENOFILE", sep="/")
  } else {
    cat(" [failed]\n",sep="")
    stop(paste("Don't know how to read data of type '",type,"'.\n",sep=""))
  }
  if (!file.exists(filename)) {
    cat(" [failed]\n",sep="")
    stop(paste("Failed to find file '",filename,"' to read ",type," data.\n",sep=""))
  }
  d<-NULL
  if ("expression" == type) {
    d.prime<-read.table(filename, header=T, sep="PHENOFIELDSEP", row.names=1, skip=PHENOLINESSKIPNO,nrows=5)
    col.numeric<-apply(d.prime,2,function(X){return(sum(!is.na(as.numeric(X)))>=4)})
    colClasses=rep("character",times=ncol(d.prime))
    colClasses[col.numeric]<-"numeric"
    if (any(!col.numeric)) {
	col.char.min<-min(which(!col.numeric))
	colClasses[col.char.min:ncol(d.prime)]<-"character"
    }
    colClasses<-c("character",colClasses)
    d<-read.table(filename, header=T, sep=",", row.names=1, skip=1, stringsAsFactors=F,colClasses=colClasses)
    if (any(!col.numeric)) {
        d<-d[,1:col.char.min]
    }
    # This needs to be helped, somehow
    d<-d[,1:150]
    cat(paste(" [ok]  dimension is [",paste(dim(d),collapse=",",sep=""),"]\n",sep=""),sep="")
    return(d)
  } else if ("genotypes" == type) {
    d <- read.table(filename, header=T, sep=",", skip=0, stringsAsFactors=F)
    d.chr<-d[1,]
    d.chr.first<-min(which(!is.na(as.numeric(d.chr))))
    d.chr<-as.character(d[1,d.chr.first:ncol(d)])
    d.morgan<-as.numeric(d[2,d.chr.first:ncol(d)])
    d.clinical<-d[3:nrow(d),1:(d.chr.first-1)]
    d.genotypes<-d[3:nrow(d),d.chr.first:ncol(d)]
    cat(paste(" [ok]  Read ",ncol(d.clinical)," classical phenotypes ",
              "and ", ncol(d.genotypes)," genotypes for ",
	      nrow(d.genotypes), " individuals.\n",sep=""),sep="")
    l<-list()
    l[["chromosomes"]]<-d.chr
    l[["cMorgan"]]<-d.morgan
    l[["clinical"]]<-d.clinical
    l[["genotypes"]]<-d.genotypes
    return(l)
  } else {
    stop(paste("Don't know how to read data of type '",type,"'.\n",sep=""))
  }

}

