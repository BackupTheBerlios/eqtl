#!/usr/bin/perl -w

TEMPLATEWARNINGHASH

=head1 NAME

insertQTLDataToSql.pl	- low level upload of single result file

=head1 SYNOPSIS

insertQTLDataToSql.pl [ --verbose ] [ --force ] --filename <name of file with results>

insertQTLDataToSql.pl --help

=head1 DESCRIPTION

This script is not meant to be executed by the regular user but
should be accessed from the wrapping iterateThroughFiles.pl script.
It takes a single result file and uploads its content to the database.

=head1 OPTIONS

=over 4

=item --filename

the file with the output of R/qtl

=item --force	

if set, every file will be interpreted, even those that the system did not expect in the computations table.

=item --help	

shows these instructions and exists

=item --verbose	

=back

=head1 AUTHORS

Jan Kolbaum <kolbaum@inb.uni-luebeck.de>, Ann-Kristin Grimm, Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>

=head1 COPYRIGHT

University of LE<uuml>beck, 2008-2009

=cut


use strict;
use DBI;
use Getopt::Long;

BEGIN {
	push @INC,"./scripts";
}

use insertQTLDataToSql;

my ($filename, $force, $help, $verbose) = (undef, 0, undef, 0);

unless (GetOptions(
        "filename:s" => \$filename,
	"force" => \$force,
	"f" => \$force,
	"help" => \$help,
	"verbose" => \$verbose
)) {
	print STDERR "Could not parse options: $@\n";
	exit -3;
}
	
pod2usage(-verbose => 1) if ($help or "-h" eq "$ARGV[0]");
pod2usage(-verbose => 2) if ($man);

my $dbh = DBI->connect( DATABASECON );
if ($!) {
	print STDERR "Database connection not made: $DBI::errstr";
	exit(-3);
}

my $exitcode = perform($dbh, $filename, $force, $verbose);
exit($exitcode);

