#!/usr/bin/perl -w

TEMPLATEWARNINGHASH

=head1 NAME

insertQTLDataToSql.pl	- low level upload of single result file

=head1 SYNOPSIS

insertQTLDataToSql.pl [ --verbose | --dryrun | --force ] --filename <name of file with results>

insertQTLDataToSql.pl --help

=head1 DESCRIPTION

This script is not meant to be executed by the regular user but
should be accessed from the wrapping iterateThroughFiles.pl script.
It takes a single result file and uploads its content to the database.

=head1 OPTIONS

=over 4

=item --filename

the file with the output of R/qtl

=item --force	

if set, every file will be interpreted, even those that the system did not expect in the computations table.

=item --help	

usage description

=item --man

complete description

=item --verbose	

=item --dryrun

set to dump all ouput to STDOUT rather than to the database server

=back

=head1 AUTHORS

Jan Kolbaum <kolbaum@inb.uni-luebeck.de>, Ann-Kristin Grimm, Steffen ME<ouml>ller <moeller@inb.uni-luebeck.de>

=head1 COPYRIGHT

University of LE<uuml>beck, Germany, 2008-2009

=cut


use strict;
use DBI;
use Getopt::Long;
use Pod::Usage;

BEGIN {
	push @INC,"./scripts";
}

# this module does the real work while this file only wraps it

use insertQTLDataToSql;


# parsing options

my ($filename, $force, $help, $man, $verbose, $dryrun) = (undef, 0, undef, undef, 0, 0);

unless (GetOptions(
        "filename:s" => \$filename,
	"force" => \$force,
	"f" => \$force,
	"help" => \$help,
	"man" => \$man,
	"verbose" => \$verbose,
	"dryrun" => \$dryrun
)) {
	print STDERR "Could not parse options: $@\n";
	exit -3;
}
	
unless (defined($filename) and -r "$filename") {
	print STDERR "Cannot read file '$filename', it may not even exist.\n";
	$man=1;
}

pod2usage(-verbose => 2) if $man;
pod2usage(-verbose => 1) if $help;

# creating databse contact

my $dbh = DBI->connect( DATABASECON );
if ($!) {
	print STDERR "Database connection not made: $DBI::errstr";
	exit(-3);
}


# call module's function

my $exitcode = perform($dbh, $filename, $force, $verbose, $dryrun);

# exiting with that function's return code

exit($exitcode);

